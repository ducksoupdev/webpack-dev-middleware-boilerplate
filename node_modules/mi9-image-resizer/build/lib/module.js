module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./image-resizer */ 1);


/***/ },
/* 1 */
/*!******************************************!*\
  !*** ./src/scripts/image-resizer.coffee ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	var AWS, ImageResizer, Thumbor, _, q,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	
	q = __webpack_require__(/*! q */ 2);
	
	_ = __webpack_require__(/*! lodash */ 3);
	
	AWS = __webpack_require__(/*! aws-sdk */ 4);
	
	Thumbor = __webpack_require__(/*! thumbor */ 5);
	
	ImageResizer = (function() {
	  var instance;
	
	  instance = null;
	
	  ImageResizer.templates = {
	    imageResizer: __webpack_require__(/*! ../templates/image-resizer */ 6)
	  };
	
	  ImageResizer.create = function(params) {
	    if (instance) {
	      return instance;
	    }
	    return instance = new ImageResizer(params);
	  };
	
	  ImageResizer.instance = function() {
	    if (instance) {
	      return instance;
	    }
	    throw new Error('ImageResizer needs to be instantiated');
	  };
	
	  function ImageResizer(params) {
	    this.middleware = bind(this.middleware, this);
	    this.cachedSigningKey = null;
	    this.cachedSigningKeyTime = null;
	    this.Thumbor = Thumbor;
	    this.settings = params;
	  }
	
	  ImageResizer.prototype.middleware = function(req, res, next) {
	    return this.fetchSigningKey()["catch"](function(e) {
	      return console.log('Failed to fetch Image Resizer Signing Key', e);
	    }).done(function() {
	      return next();
	    });
	  };
	
	  ImageResizer.prototype.fetchSigningKey = function() {
	    var currentTime, deferred, deltaTime;
	    currentTime = (new Date()).getTime();
	    if (this.settings.signing.enabled) {
	      deltaTime = currentTime - this.cachedSigningKeyTime;
	      if (this.cachedSigningKeyTime === null || deltaTime > this.settings.signing.lifetime) {
	        this.cachedSigningKeyTime = currentTime;
	        deferred = q.defer();
	        this.getBucketContent(this.settings.signing.region, this.settings.signing.bucketName, this.settings.signing.key).done((function(_this) {
	          return function(key) {
	            if (key) {
	              _this.cachedSigningKey = key;
	            }
	            return deferred.resolve(_this.cachedSigningKey);
	          };
	        })(this), (function(_this) {
	          return function(e) {
	            _this.cachedSigningKeyTime = null;
	            return deferred.reject(e);
	          };
	        })(this));
	        if (!this.cachedSigningKey) {
	          return deferred.promise;
	        }
	      }
	    }
	    return q(this.cachedSigningKey);
	  };
	
	  ImageResizer.prototype.getSigningKey = function() {
	    if (this.settings.signing.enabled) {
	      if (this.cachedSigningKey) {
	        return this.cachedSigningKey;
	      } else {
	        throw new Error('Signing is required but no signing key available');
	      }
	    } else {
	      return null;
	    }
	  };
	
	  ImageResizer.prototype.getBucketContent = function(region, bucket, key) {
	    var deferred, s3;
	    deferred = q.defer();
	    s3 = new AWS.S3({
	      region: region
	    });
	    s3.getObject({
	      Bucket: bucket,
	      Key: key
	    }, function(err, data) {
	      if (err) {
	        console.log("Failed to retrieve " + bucket + "/" + key + " from S3", err);
	        return deferred.reject(err);
	      } else {
	        return deferred.resolve(data != null ? data.Body : void 0);
	      }
	    });
	    return deferred.promise;
	  };
	
	  ImageResizer.prototype.getDefaultOptions = function() {
	    return {
	      width: 0,
	      height: 0
	    };
	  };
	
	  ImageResizer.prototype.getResizedImageUrl = function(source, options) {
	    var e, encodedSource, filters, key, thumbor;
	    if (source) {
	      try {
	        encodedSource = encodeURIComponent(decodeURIComponent(source));
	        key = this.getSigningKey();
	        options = _.merge({}, this.getDefaultOptions(), options);
	        thumbor = new this.Thumbor(key, this.settings.baseUrl);
	        thumbor.setImagePath(encodedSource).resize(options.width, options.height);
	        filters = _.merge(this.settings.filters, options.filters);
	        return this.applyFilters(thumbor, filters).buildUrl();
	      } catch (_error) {
	        e = _error;
	        console.log('Failed to generate thumbor url', e);
	        return source;
	      }
	    } else {
	      return null;
	    }
	  };
	
	  ImageResizer.prototype.applyFilters = function(thumbor, filters) {
	    var ref, ref1;
	    thumbor.smartCrop(filters.smart);
	    if ((ref = filters.align) != null ? ref.horizontal : void 0) {
	      thumbor.halign(filters.align.horizontal);
	    }
	    if ((ref1 = filters.align) != null ? ref1.vertical : void 0) {
	      thumbor.valign(filters.align.vertical);
	    }
	    return thumbor;
	  };
	
	  ImageResizer.prototype.getResizedImageSet = function(source, options, aspect) {
	    var imageSetSizes;
	    if (source) {
	      imageSetSizes = this.getResizedImageSetSizes(options);
	      return imageSetSizes.map((function(_this) {
	        return function(item) {
	          if (item != null) {
	            item.height = aspect ? Math.round((item != null ? item.width : void 0) / aspect) : 0;
	          }
	          options = _.merge({}, options, item);
	          return {
	            size: {
	              width: item != null ? item.width : void 0
	            },
	            src: _this.getResizedImageUrl(source, options)
	          };
	        };
	      })(this));
	    } else {
	      return [];
	    }
	  };
	
	  ImageResizer.prototype.getResizedImageSetSizes = function(options) {
	    var i, imageSetSizes, len, ref, size;
	    imageSetSizes = [];
	    if (options && options.width) {
	      ref = this.settings.imageSet.sizes;
	      for (i = 0, len = ref.length; i < len; i++) {
	        size = ref[i];
	        imageSetSizes.push(size);
	        if (size.width > options.width) {
	          break;
	        }
	      }
	    } else {
	      imageSetSizes = this.settings.imageSet.sizes;
	    }
	    return imageSetSizes;
	  };
	
	  return ImageResizer;
	
	})();
	
	module.exports = ImageResizer;


/***/ },
/* 2 */
/*!********************!*\
  !*** external "q" ***!
  \********************/
/***/ function(module, exports) {

	module.exports = require("q");

/***/ },
/* 3 */
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 4 */
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ function(module, exports) {

	module.exports = require("aws-sdk");

/***/ },
/* 5 */
/*!**************************!*\
  !*** external "thumbor" ***!
  \**************************/
/***/ function(module, exports) {

	module.exports = require("thumbor");

/***/ },
/* 6 */
/*!******************************************!*\
  !*** ./src/templates/image-resizer.jade ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 7);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model) {
	if ( model.url)
	{
	var alt = model.alt;
	var width = model.width;
	var height = model.height;
	var aspect = model.width / model.height;
	var padding = model.height / model.width * 100;
	var url = model.url;
	var urlSet = model.urlSet;
	buf.push("<figure" + (jade.attr("style", width ? "padding-top: " + (padding) + "%" : false, true, false)) + (jade.cls([['image-resizer', width ? 'image-resizer--placeholder' : '']], [true])) + "><img" + (jade.attr("alt", alt, true, false)) + " src=\"http://9news.static9.net.au/Content/images/1x1.gif\" data-image-resizer=\"data-image-resizer\"" + (jade.attr("data-src-set", urlSet, true, false)) + (jade.attr("data-aspect", aspect, true, false)) + " class=\"image-resizer__image\"/><noscript><div class=\"image-resizer--nojs\"><img" + (jade.attr("alt", alt, true, false)) + (jade.attr("src", url, true, false)) + " data-image-resizer=\"data-image-resizer\" class=\"image-resizer__image image-resizer__image--nojs\"/></div></noscript></figure>");
	}}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 7 */
/*!*******************************!*\
  !*** ./~/jade/lib/runtime.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(/*! fs */ 8).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 8 */
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,