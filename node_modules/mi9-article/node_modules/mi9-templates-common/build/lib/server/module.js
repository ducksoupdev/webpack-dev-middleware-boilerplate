module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  author: __webpack_require__(/*! ../templates/author */ 1),
	  videoBlock: __webpack_require__(/*! ../templates/video-block */ 4),
	  outbrain: __webpack_require__(/*! ../templates/outbrain */ 5),
	  mediaList: __webpack_require__(/*! ../templates/media-list */ 6),
	  footer: __webpack_require__(/*! ../templates/footer */ 7),
	  storyBlock: __webpack_require__(/*! ../templates/story-block */ 8)
	};


/***/ },
/* 1 */
/*!***********************************!*\
  !*** ./src/templates/author.jade ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (author, model) {
	var image = model.image;
	var name = model.name;
	if ( author)
	{
	buf.push("<div class=\"author\">");
	if ( image)
	{
	var url = image.url;
	var alt = image.alt;
	buf.push("<span class=\"author__pic\"><img" + (jade.attr("src", url, true, false)) + (jade.attr("alt", alt, true, false)) + "/></span>");
	}
	buf.push("<span>" + (jade.escape(null == (jade_interp = 'By ') ? "" : jade_interp)) + "</span><span class=\"author__name\">" + (null == (jade_interp = name) ? "" : jade_interp) + "</span></div>");
	}}.call(this,"author" in locals_for_with?locals_for_with.author:typeof author!=="undefined"?author:undefined,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 2 */
/*!*******************************!*\
  !*** ./~/jade/lib/runtime.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(/*! fs */ 3).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 3 */
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 4 */
/*!****************************************!*\
  !*** ./src/templates/video-block.jade ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model, partials) {
	buf.push("<div data-module=\"video\"" + (jade.attr("data-video", model.urn, true, false)) + " data-category-name=\"MSNVideo_Cat\" data-category-value=\"ausydney\" class=\"video-block module\"><div" + (jade.attr("id", model.videoId, true, false)) + " class=\"video-block__player\"></div><div class=\"video-block__image\">");
	if ( model.media)
	{
	buf.push(null == (jade_interp = partials.imageResizer({model: model.media})) ? "" : jade_interp);
	}
	buf.push("</div><div class=\"play\"></div></div>");}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined,"partials" in locals_for_with?locals_for_with.partials:typeof partials!=="undefined"?partials:undefined));;return buf.join("");
	}

/***/ },
/* 5 */
/*!*************************************!*\
  !*** ./src/templates/outbrain.jade ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model) {
	buf.push("<div" + (jade.attr("data-src", model.url, true, false)) + (jade.attr("data-widget-id", model.widgetId, true, false)) + (jade.attr("data-ob-template", model.obTemplate, true, false)) + " class=\"OUTBRAIN\"></div><script type=\"text/javascript\" async=\"async\" src=\"http://widgets.outbrain.com/outbrain.js\"></script>");}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 6 */
/*!***************************************!*\
  !*** ./src/templates/media-list.jade ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (headerAccessoryLink, headerContentLink, headerLink, includePartial, items, title, trackingName, undefined, widgetClass) {
	jade_mixins["headerContentLink"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	if ( headerContentLink)
	{
	buf.push("<a" + (jade.attr("href", headerContentLink, true, false)) + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-header", true, false)) + "><h3 class=\"widget__header__text\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h3></a>");
	}
	else
	{
	buf.push("<h3 class=\"widget__header__text\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h3>");
	}
	};
	jade_mixins["headerAccessoryLink"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	if ( headerAccessoryLink)
	{
	buf.push("<a" + (jade.attr("href", headerAccessoryLink, true, false)) + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-header", true, false)) + "><div class=\"widget__header__accessory\"></div></a>");
	}
	else
	{
	buf.push("<div class=\"widget__header__accessory\"></div>");
	}
	};
	jade_mixins["headerLink"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	if ( headerLink)
	{
	buf.push("<a" + (jade.attr("href", headerLink, true, false)) + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-header", true, false)) + "><div class=\"widget__header\">");
	jade_mixins["headerContentLink"]();
	jade_mixins["headerAccessoryLink"]();
	buf.push("</div></a>");
	}
	else
	{
	buf.push("<div class=\"widget__header\">");
	jade_mixins["headerContentLink"]();
	jade_mixins["headerAccessoryLink"]();
	buf.push("</div>");
	}
	};
	buf.push("<div data-module=\"decorators/trackingDecorator\"" + (jade.cls(['widget','media-list','module',widgetClass], [null,null,null,true])) + ">");
	jade_mixins["headerLink"]();
	// iterate items
	;(function(){
	  var $$obj = items;
	  if ('number' == typeof $$obj.length) {
	
	    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
	      var item = $$obj[index];
	
	var imageLink = item.imageLink;
	var link = item.link;
	var heading = item.heading;
	var text = item.text;
	var media = item.image;
	buf.push("<div class=\"media-block\">");
	if ( imageLink)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", imageLink, true, false)) + " class=\"media-block__link\"><div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div></a>");
	}
	else
	{
	buf.push("<div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div>");
	}
	if ( link)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", link, true, false)) + " class=\"media-block__link\"><div class=\"media-block__body\"><h3 class=\"media-block__heading\">" + (jade.escape(null == (jade_interp = heading) ? "" : jade_interp)) + "</h3><p class=\"media-block__text\">" + (jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</p></div></a>");
	}
	buf.push("</div>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var index in $$obj) {
	      $$l++;      var item = $$obj[index];
	
	var imageLink = item.imageLink;
	var link = item.link;
	var heading = item.heading;
	var text = item.text;
	var media = item.image;
	buf.push("<div class=\"media-block\">");
	if ( imageLink)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", imageLink, true, false)) + " class=\"media-block__link\"><div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div></a>");
	}
	else
	{
	buf.push("<div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div>");
	}
	if ( link)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", link, true, false)) + " class=\"media-block__link\"><div class=\"media-block__body\"><h3 class=\"media-block__heading\">" + (jade.escape(null == (jade_interp = heading) ? "" : jade_interp)) + "</h3><p class=\"media-block__text\">" + (jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</p></div></a>");
	}
	buf.push("</div>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</div>");}.call(this,"headerAccessoryLink" in locals_for_with?locals_for_with.headerAccessoryLink:typeof headerAccessoryLink!=="undefined"?headerAccessoryLink:undefined,"headerContentLink" in locals_for_with?locals_for_with.headerContentLink:typeof headerContentLink!=="undefined"?headerContentLink:undefined,"headerLink" in locals_for_with?locals_for_with.headerLink:typeof headerLink!=="undefined"?headerLink:undefined,"includePartial" in locals_for_with?locals_for_with.includePartial:typeof includePartial!=="undefined"?includePartial:undefined,"items" in locals_for_with?locals_for_with.items:typeof items!=="undefined"?items:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"trackingName" in locals_for_with?locals_for_with.trackingName:typeof trackingName!=="undefined"?trackingName:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined,"widgetClass" in locals_for_with?locals_for_with.widgetClass:typeof widgetClass!=="undefined"?widgetClass:undefined));;return buf.join("");
	}

/***/ },
/* 7 */
/*!***********************************!*\
  !*** ./src/templates/footer.jade ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (facebookUrl, includePartial, links, twitterUrl, undefined) {
	jade_mixins["galleryAd"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	buf.push("<div class=\"gallery__utility-ad\">" + (null == (jade_interp = includePartial('ad--ext', {adType: 'MEDIUM', location: 'TOP.1', classes: 'module', moduleDecorator: 'default.ad', moduleId: 'default.footer.ad', minWidth: '768'})) ? "" : jade_interp) + "</div>");
	};
	buf.push("<div id=\"footer\" data-module=\"decorators/trackingDecorator\" class=\"footer__container module\"><div data-module=\"decorators/fixedFooterDecorator\" data-anchor=\"#footer\" class=\"footer module\">");
	jade_mixins["galleryAd"]();
	buf.push("<div class=\"footer__header\"><a href=\"/\" data-tracking-link-name=\"footer_logo\" class=\"footer__logo\"></a><a target=\"_blank\"" + (jade.attr("href", facebookUrl, true, false)) + " data-tracking-link-name=\"footer_facebook\" class=\"footer__link__facebook\"></a><a target=\"_blank\"" + (jade.attr("href", twitterUrl, true, false)) + " data-tracking-link-name=\"footer_twitter\" class=\"footer__link__twitter\"></a></div><div class=\"footer__links\"><ul class=\"footer__list\">");
	// iterate links
	;(function(){
	  var $$obj = links;
	  if ('number' == typeof $$obj.length) {
	
	    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
	      var link = $$obj[index];
	
	buf.push("<li class=\"footer__item\"><a" + (jade.attr("href", link.url, true, false)) + (jade.attr("title", link._name, true, false)) + " target=\"_blank\"" + (jade.attr("data-tracking-link-name", "footer-" + (index) + "", true, false)) + ">" + (jade.escape((jade_interp = link._name) == null ? '' : jade_interp)) + "</a></li>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var index in $$obj) {
	      $$l++;      var link = $$obj[index];
	
	buf.push("<li class=\"footer__item\"><a" + (jade.attr("href", link.url, true, false)) + (jade.attr("title", link._name, true, false)) + " target=\"_blank\"" + (jade.attr("data-tracking-link-name", "footer-" + (index) + "", true, false)) + ">" + (jade.escape((jade_interp = link._name) == null ? '' : jade_interp)) + "</a></li>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</ul><a href=\"#\" data-tracking-link-name=\"footer_backtotop\" class=\"footer__top-link\"><div class=\"footer__top-link--icon\"></div></a></div></div></div>");}.call(this,"facebookUrl" in locals_for_with?locals_for_with.facebookUrl:typeof facebookUrl!=="undefined"?facebookUrl:undefined,"includePartial" in locals_for_with?locals_for_with.includePartial:typeof includePartial!=="undefined"?includePartial:undefined,"links" in locals_for_with?locals_for_with.links:typeof links!=="undefined"?links:undefined,"twitterUrl" in locals_for_with?locals_for_with.twitterUrl:typeof twitterUrl!=="undefined"?twitterUrl:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined));;return buf.join("");
	}

/***/ },
/* 8 */
/*!****************************************!*\
  !*** ./src/templates/story-block.jade ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (clamp, includePartial, kicker, settings, storyBlock) {
	buf.push("<div" + (jade.attr("data-content-id", storyBlock.id, true, false)) + (jade.cls(['storyblock',!storyBlock.image ? 'has-no-image' : ''], [null,true])) + ">");
	if ( storyBlock.image)
	{
	buf.push("<a" + (jade.attr("href", "" + (storyBlock.link) + "", true, false)) + (jade.attr("data-tracking-link-name", "feed_" + (storyBlock.templateName) + "_image", true, false)) + (jade.cls(["story-block__image hero " + (storyBlock.templateName) + " " + (storyBlock.portraitClasses) + " " + (storyBlock.portraitHero) + ""], [true])) + ">");
	if ( kicker)
	{
	buf.push("<div class=\"story-block__kicker-outer\"><div class=\"story-block__kicker\"></div></div>");
	}
	buf.push((null == (jade_interp = includePartial('image-resizer-figure--ext', {media: storyBlock.image})) ? "" : jade_interp) + "</a>");
	}
	buf.push("<div" + (jade.cls(['text-wrapper',clamp], [null,true])) + "><a" + (jade.attr("href", "" + (storyBlock.link) + "", true, false)) + (jade.attr("data-tracking-link-name", "feed_" + (storyBlock.templateName) + "_headine", true, false)) + " class=\"heading-link\">");
	if ( !storyBlock.image && storyBlock.kicker)
	{
	buf.push("<div class=\"story-block__kicker-outer\"><div class=\"story-block__kicker\">" + (null == (jade_interp = storyBlock.kicker) ? "" : jade_interp) + "</div></div>");
	}
	buf.push("<div class=\"story-block__headline\">" + (null == (jade_interp = storyBlock.headline) ? "" : jade_interp) + "</div></a><p class=\"story-block__standfirst\">" + (null == (jade_interp = storyBlock.standfirst) ? "" : jade_interp) + "</p></div><div class=\"story-block__byline\">");
	if ( storyBlock.sectionTag)
	{
	buf.push("<div class=\"story-block__section-tag\">" + (null == (jade_interp = storyBlock.sectionTag) ? "" : jade_interp) + "</div>");
	}
	if ( storyBlock.author)
	{
	buf.push("<div class=\"author\"><span>By</span><span class=\"author__name\">" + (null == (jade_interp = storyBlock.author) ? "" : jade_interp) + "</span></div>");
	}
	buf.push("<span class=\"story-block__time time\">");
	if ( storyBlock.displayTime)
	{
	buf.push(null == (jade_interp = storyBlock.displayTime) ? "" : jade_interp);
	}
	buf.push("</span>");
	if ( settings.enableGigyaSharingButtons)
	{
	buf.push("<div class=\"story-block__share share--simple\">");
	storyBlock.isTakeover = true
	buf.push((null == (jade_interp = includePartial('share--ext', {content: storyBlock})) ? "" : jade_interp) + "</div>");
	}
	buf.push("</div></div>");}.call(this,"clamp" in locals_for_with?locals_for_with.clamp:typeof clamp!=="undefined"?clamp:undefined,"includePartial" in locals_for_with?locals_for_with.includePartial:typeof includePartial!=="undefined"?includePartial:undefined,"kicker" in locals_for_with?locals_for_with.kicker:typeof kicker!=="undefined"?kicker:undefined,"settings" in locals_for_with?locals_for_with.settings:typeof settings!=="undefined"?settings:undefined,"storyBlock" in locals_for_with?locals_for_with.storyBlock:typeof storyBlock!=="undefined"?storyBlock:undefined));;return buf.join("");
	}

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL21pOS10ZW1wbGF0ZXMtY29tbW9uL3dlYnBhY2svYm9vdHN0cmFwIGUxZWViZDRjZjFkOTU4M2MwM2RlIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vLi9zcmMvc2NyaXB0cy9pbmRleC5jb2ZmZWUiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9taTktdGVtcGxhdGVzLWNvbW1vbi8uL3NyYy90ZW1wbGF0ZXMvYXV0aG9yLmphZGUiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9taTktdGVtcGxhdGVzLWNvbW1vbi8uL34vamFkZS9saWIvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL21pOS10ZW1wbGF0ZXMtY29tbW9uL2ZzIChpZ25vcmVkKSIsIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL21pOS10ZW1wbGF0ZXMtY29tbW9uLy4vc3JjL3RlbXBsYXRlcy92aWRlby1ibG9jay5qYWRlIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vLi9zcmMvdGVtcGxhdGVzL291dGJyYWluLmphZGUiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9taTktdGVtcGxhdGVzLWNvbW1vbi8uL3NyYy90ZW1wbGF0ZXMvbWVkaWEtbGlzdC5qYWRlIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vLi9zcmMvdGVtcGxhdGVzL2Zvb3Rlci5qYWRlIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vLi9zcmMvdGVtcGxhdGVzL3N0b3J5LWJsb2NrLmphZGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7O0FDdENBLE9BQU0sQ0FBQyxPQUFQLEdBQ0k7R0FBQSxRQUFRLG9CQUFRLDRCQUFSLENBQVI7R0FDQSxZQUFZLG9CQUFRLGlDQUFSLENBRFo7R0FFQSxVQUFVLG9CQUFRLDhCQUFSLENBRlY7R0FHQSxXQUFXLG9CQUFRLGdDQUFSLENBSFg7R0FJQSxRQUFRLG9CQUFRLDRCQUFSLENBSlI7R0FLQSxZQUFZLG9CQUFRLGlDQUFSLENBTFo7Ozs7Ozs7Ozs7O0FDREo7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDLG1DQUFtQyxFQUFFO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUUsME1BQTBNO0FBQzVNLEU7Ozs7Ozs7OztBQ3BCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEIsWUFBVyxPQUFPO0FBQ2xCLGFBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBVyxFQUFFO0FBQ2IsYUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsRUFBRTtBQUNiLGFBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUErRSxpQkFBaUIsRUFBRTtBQUNsRztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsTUFBTTtBQUNqQixZQUFXLGdCQUFnQjtBQUMzQixhQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0Esa0JBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSyxTQUFTO0FBQ2QsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixZQUFXLE9BQU87QUFDbEIsWUFBVyxRQUFRO0FBQ25CLFlBQVcsUUFBUTtBQUNuQixhQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQSw4Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF1RTtBQUN2RSxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixZQUFXLE9BQU87QUFDbEIsYUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG9CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVcsT0FBTztBQUNsQixhQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBLGNBQWE7QUFDYixhQUFZO0FBQ1osYUFBWTtBQUNaLGVBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE1BQU07QUFDakIsWUFBVyxPQUFPO0FBQ2xCLFlBQVcsT0FBTztBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUNyUEEsZ0I7Ozs7Ozs7OztBQ0FBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxtQ0FBbUMsRUFBRTtBQUN0QztBQUNBO0FBQ0E7QUFDQSx3REFBdUQsbUJBQW1CO0FBQzFFO0FBQ0EscURBQW9ELGtOQUFrTjtBQUN0USxFOzs7Ozs7Ozs7QUNiQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsbUNBQW1DLEVBQUU7QUFDdEMsNFVBQTJVLDBHQUEwRztBQUNyYixFOzs7Ozs7Ozs7QUNSQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsbUNBQW1DLEVBQUU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7O0FBRUEsNENBQTJDLGFBQWE7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdTQUF1UyxhQUFhO0FBQ3BUO0FBQ0E7QUFDQTtBQUNBLHNIQUFxSCxhQUFhO0FBQ2xJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUc7QUFDSDtBQUNBO0FBQ0EsYUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd1NBQXVTLGFBQWE7QUFDcFQ7QUFDQTtBQUNBO0FBQ0Esc0hBQXFILGFBQWE7QUFDbEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFDOztBQUVELHFCQUFvQixzaENBQThpQztBQUNsa0MsRTs7Ozs7Ozs7O0FDM0dBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQyxtQ0FBbUMsRUFBRTtBQUN0QztBQUNBO0FBQ0EscUdBQW9HLHNJQUFzSTtBQUMxTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7O0FBRUEsNENBQTJDLGFBQWE7QUFDeEQ7O0FBRUE7QUFDQTs7QUFFQSxJQUFHO0FBQ0g7QUFDQTtBQUNBLGFBQVk7O0FBRVo7QUFDQTs7QUFFQTtBQUNBLEVBQUM7O0FBRUQsNEtBQTJLLGtpQkFBMGpCO0FBQ3J1QixFOzs7Ozs7Ozs7QUNyQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDLG1DQUFtQyxFQUFFO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBOEUsd0JBQXdCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQStELG9CQUFvQjtBQUNuRjtBQUNBLDJCQUEwQixraUJBQWtpQjtBQUM1akIsRSIsImZpbGUiOiJsaWIvc2VydmVyL21vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgZTFlZWJkNGNmMWQ5NTgzYzAzZGVcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9XG4gICAgYXV0aG9yOiByZXF1aXJlICcuLi90ZW1wbGF0ZXMvYXV0aG9yJ1xuICAgIHZpZGVvQmxvY2s6IHJlcXVpcmUgJy4uL3RlbXBsYXRlcy92aWRlby1ibG9jaydcbiAgICBvdXRicmFpbjogcmVxdWlyZSAnLi4vdGVtcGxhdGVzL291dGJyYWluJ1xuICAgIG1lZGlhTGlzdDogcmVxdWlyZSAnLi4vdGVtcGxhdGVzL21lZGlhLWxpc3QnXG4gICAgZm9vdGVyOiByZXF1aXJlICcuLi90ZW1wbGF0ZXMvZm9vdGVyJ1xuICAgIHN0b3J5QmxvY2s6IHJlcXVpcmUgJy4uL3RlbXBsYXRlcy9zdG9yeS1ibG9jaydcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vY29mZmVlbGludC1sb2FkZXIhLi9zcmMvc2NyaXB0cy9pbmRleC5jb2ZmZWVcbiAqKi8iLCJ2YXIgamFkZSA9IHJlcXVpcmUoXCIvVXNlcnMvc3RldmUvUHJvamVjdHMvTWk5L21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vbm9kZV9tb2R1bGVzL2phZGUvbGliL3J1bnRpbWUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGVtcGxhdGUobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgamFkZV9taXhpbnMgPSB7fTtcbnZhciBqYWRlX2ludGVycDtcbjt2YXIgbG9jYWxzX2Zvcl93aXRoID0gKGxvY2FscyB8fCB7fSk7KGZ1bmN0aW9uIChhdXRob3IsIG1vZGVsKSB7XG52YXIgaW1hZ2UgPSBtb2RlbC5pbWFnZTtcbnZhciBuYW1lID0gbW9kZWwubmFtZTtcbmlmICggYXV0aG9yKVxue1xuYnVmLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJhdXRob3JcXFwiPlwiKTtcbmlmICggaW1hZ2UpXG57XG52YXIgdXJsID0gaW1hZ2UudXJsO1xudmFyIGFsdCA9IGltYWdlLmFsdDtcbmJ1Zi5wdXNoKFwiPHNwYW4gY2xhc3M9XFxcImF1dGhvcl9fcGljXFxcIj48aW1nXCIgKyAoamFkZS5hdHRyKFwic3JjXCIsIHVybCwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJhbHRcIiwgYWx0LCB0cnVlLCBmYWxzZSkpICsgXCIvPjwvc3Bhbj5cIik7XG59XG5idWYucHVzaChcIjxzcGFuPlwiICsgKGphZGUuZXNjYXBlKG51bGwgPT0gKGphZGVfaW50ZXJwID0gJ0J5ICcpID8gXCJcIiA6IGphZGVfaW50ZXJwKSkgKyBcIjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwiYXV0aG9yX19uYW1lXFxcIj5cIiArIChudWxsID09IChqYWRlX2ludGVycCA9IG5hbWUpID8gXCJcIiA6IGphZGVfaW50ZXJwKSArIFwiPC9zcGFuPjwvZGl2PlwiKTtcbn19LmNhbGwodGhpcyxcImF1dGhvclwiIGluIGxvY2Fsc19mb3Jfd2l0aD9sb2NhbHNfZm9yX3dpdGguYXV0aG9yOnR5cGVvZiBhdXRob3IhPT1cInVuZGVmaW5lZFwiP2F1dGhvcjp1bmRlZmluZWQsXCJtb2RlbFwiIGluIGxvY2Fsc19mb3Jfd2l0aD9sb2NhbHNfZm9yX3dpdGgubW9kZWw6dHlwZW9mIG1vZGVsIT09XCJ1bmRlZmluZWRcIj9tb2RlbDp1bmRlZmluZWQpKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdGVtcGxhdGVzL2F1dGhvci5qYWRlXG4gKiogbW9kdWxlIGlkID0gMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1lcmdlIHR3byBhdHRyaWJ1dGUgb2JqZWN0cyBnaXZpbmcgcHJlY2VkZW5jZVxuICogdG8gdmFsdWVzIGluIG9iamVjdCBgYmAuIENsYXNzZXMgYXJlIHNwZWNpYWwtY2FzZWRcbiAqIGFsbG93aW5nIGZvciBhcnJheXMgYW5kIG1lcmdpbmcvam9pbmluZyBhcHByb3ByaWF0ZWx5XG4gKiByZXN1bHRpbmcgaW4gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBiXG4gKiBAcmV0dXJuIHtPYmplY3R9IGFcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZShhLCBiKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgdmFyIGF0dHJzID0gYVswXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGF0dHJzID0gbWVyZ2UoYXR0cnMsIGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gYXR0cnM7XG4gIH1cbiAgdmFyIGFjID0gYVsnY2xhc3MnXTtcbiAgdmFyIGJjID0gYlsnY2xhc3MnXTtcblxuICBpZiAoYWMgfHwgYmMpIHtcbiAgICBhYyA9IGFjIHx8IFtdO1xuICAgIGJjID0gYmMgfHwgW107XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFjKSkgYWMgPSBbYWNdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShiYykpIGJjID0gW2JjXTtcbiAgICBhWydjbGFzcyddID0gYWMuY29uY2F0KGJjKS5maWx0ZXIobnVsbHMpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBpZiAoa2V5ICE9ICdjbGFzcycpIHtcbiAgICAgIGFba2V5XSA9IGJba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYTtcbn07XG5cbi8qKlxuICogRmlsdGVyIG51bGwgYHZhbGBzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbnVsbHModmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB2YWwgIT09ICcnO1xufVxuXG4vKipcbiAqIGpvaW4gYXJyYXkgYXMgY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbFxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnRzLmpvaW5DbGFzc2VzID0gam9pbkNsYXNzZXM7XG5mdW5jdGlvbiBqb2luQ2xhc3Nlcyh2YWwpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5KHZhbCkgPyB2YWwubWFwKGpvaW5DbGFzc2VzKSA6XG4gICAgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JykgPyBPYmplY3Qua2V5cyh2YWwpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB2YWxba2V5XTsgfSkgOlxuICAgIFt2YWxdKS5maWx0ZXIobnVsbHMpLmpvaW4oJyAnKTtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGhlIGdpdmVuIGNsYXNzZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gY2xhc3Nlc1xuICogQHBhcmFtIHtBcnJheS48Qm9vbGVhbj59IGVzY2FwZWRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5jbHMgPSBmdW5jdGlvbiBjbHMoY2xhc3NlcywgZXNjYXBlZCkge1xuICB2YXIgYnVmID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChlc2NhcGVkICYmIGVzY2FwZWRbaV0pIHtcbiAgICAgIGJ1Zi5wdXNoKGV4cG9ydHMuZXNjYXBlKGpvaW5DbGFzc2VzKFtjbGFzc2VzW2ldXSkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLnB1c2goam9pbkNsYXNzZXMoY2xhc3Nlc1tpXSkpO1xuICAgIH1cbiAgfVxuICB2YXIgdGV4dCA9IGpvaW5DbGFzc2VzKGJ1Zik7XG4gIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiAnIGNsYXNzPVwiJyArIHRleHQgKyAnXCInO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuXG5leHBvcnRzLnN0eWxlID0gZnVuY3Rpb24gKHZhbCkge1xuICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbCkubWFwKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgcmV0dXJuIHN0eWxlICsgJzonICsgdmFsW3N0eWxlXTtcbiAgICB9KS5qb2luKCc7Jyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxufTtcbi8qKlxuICogUmVuZGVyIHRoZSBnaXZlbiBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbFxuICogQHBhcmFtIHtCb29sZWFufSBlc2NhcGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRlcnNlXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmV4cG9ydHMuYXR0ciA9IGZ1bmN0aW9uIGF0dHIoa2V5LCB2YWwsIGVzY2FwZWQsIHRlcnNlKSB7XG4gIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICB2YWwgPSBleHBvcnRzLnN0eWxlKHZhbCk7XG4gIH1cbiAgaWYgKCdib29sZWFuJyA9PSB0eXBlb2YgdmFsIHx8IG51bGwgPT0gdmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgcmV0dXJuICcgJyArICh0ZXJzZSA/IGtleSA6IGtleSArICc9XCInICsga2V5ICsgJ1wiJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoMCA9PSBrZXkuaW5kZXhPZignZGF0YScpICYmICdzdHJpbmcnICE9IHR5cGVvZiB2YWwpIHtcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkodmFsKS5pbmRleE9mKCcmJykgIT09IC0xKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1NpbmNlIEphZGUgMi4wLjAsIGFtcGVyc2FuZHMgKGAmYCkgaW4gZGF0YSBhdHRyaWJ1dGVzICcgK1xuICAgICAgICAgICAgICAgICAgICd3aWxsIGJlIGVzY2FwZWQgdG8gYCZhbXA7YCcpO1xuICAgIH07XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsLnRvSVNPU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0phZGUgd2lsbCBlbGltaW5hdGUgdGhlIGRvdWJsZSBxdW90ZXMgYXJvdW5kIGRhdGVzIGluICcgK1xuICAgICAgICAgICAgICAgICAgICdJU08gZm9ybSBhZnRlciAyLjAuMCcpO1xuICAgIH1cbiAgICByZXR1cm4gJyAnICsga2V5ICsgXCI9J1wiICsgSlNPTi5zdHJpbmdpZnkodmFsKS5yZXBsYWNlKC8nL2csICcmYXBvczsnKSArIFwiJ1wiO1xuICB9IGVsc2UgaWYgKGVzY2FwZWQpIHtcbiAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwudG9JU09TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybignSmFkZSB3aWxsIHN0cmluZ2lmeSBkYXRlcyBpbiBJU08gZm9ybSBhZnRlciAyLjAuMCcpO1xuICAgIH1cbiAgICByZXR1cm4gJyAnICsga2V5ICsgJz1cIicgKyBleHBvcnRzLmVzY2FwZSh2YWwpICsgJ1wiJztcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwudG9JU09TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybignSmFkZSB3aWxsIHN0cmluZ2lmeSBkYXRlcyBpbiBJU08gZm9ybSBhZnRlciAyLjAuMCcpO1xuICAgIH1cbiAgICByZXR1cm4gJyAnICsga2V5ICsgJz1cIicgKyB2YWwgKyAnXCInO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgZ2l2ZW4gYXR0cmlidXRlcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtPYmplY3R9IGVzY2FwZWRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZXhwb3J0cy5hdHRycyA9IGZ1bmN0aW9uIGF0dHJzKG9iaiwgdGVyc2Upe1xuICB2YXIgYnVmID0gW107XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuXG4gIGlmIChrZXlzLmxlbmd0aCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV1cbiAgICAgICAgLCB2YWwgPSBvYmpba2V5XTtcblxuICAgICAgaWYgKCdjbGFzcycgPT0ga2V5KSB7XG4gICAgICAgIGlmICh2YWwgPSBqb2luQ2xhc3Nlcyh2YWwpKSB7XG4gICAgICAgICAgYnVmLnB1c2goJyAnICsga2V5ICsgJz1cIicgKyB2YWwgKyAnXCInKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmLnB1c2goZXhwb3J0cy5hdHRyKGtleSwgdmFsLCBmYWxzZSwgdGVyc2UpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmLmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBFc2NhcGUgdGhlIGdpdmVuIHN0cmluZyBvZiBgaHRtbGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGh0bWxcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBqYWRlX2VuY29kZV9odG1sX3J1bGVzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90Oydcbn07XG52YXIgamFkZV9tYXRjaF9odG1sID0gL1smPD5cIl0vZztcblxuZnVuY3Rpb24gamFkZV9lbmNvZGVfY2hhcihjKSB7XG4gIHJldHVybiBqYWRlX2VuY29kZV9odG1sX3J1bGVzW2NdIHx8IGM7XG59XG5cbmV4cG9ydHMuZXNjYXBlID0gamFkZV9lc2NhcGU7XG5mdW5jdGlvbiBqYWRlX2VzY2FwZShodG1sKXtcbiAgdmFyIHJlc3VsdCA9IFN0cmluZyhodG1sKS5yZXBsYWNlKGphZGVfbWF0Y2hfaHRtbCwgamFkZV9lbmNvZGVfY2hhcik7XG4gIGlmIChyZXN1bHQgPT09ICcnICsgaHRtbCkgcmV0dXJuIGh0bWw7XG4gIGVsc2UgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUmUtdGhyb3cgdGhlIGdpdmVuIGBlcnJgIGluIGNvbnRleHQgdG8gdGhlXG4gKiB0aGUgamFkZSBpbiBgZmlsZW5hbWVgIGF0IHRoZSBnaXZlbiBgbGluZW5vYC5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IGxpbmVub1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhlcnIsIGZpbGVuYW1lLCBsaW5lbm8sIHN0cil7XG4gIGlmICghKGVyciBpbnN0YW5jZW9mIEVycm9yKSkgdGhyb3cgZXJyO1xuICBpZiAoKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgfHwgIWZpbGVuYW1lKSAmJiAhc3RyKSB7XG4gICAgZXJyLm1lc3NhZ2UgKz0gJyBvbiBsaW5lICcgKyBsaW5lbm87XG4gICAgdGhyb3cgZXJyO1xuICB9XG4gIHRyeSB7XG4gICAgc3RyID0gc3RyIHx8IHJlcXVpcmUoJ2ZzJykucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmOCcpXG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgcmV0aHJvdyhlcnIsIG51bGwsIGxpbmVubylcbiAgfVxuICB2YXIgY29udGV4dCA9IDNcbiAgICAsIGxpbmVzID0gc3RyLnNwbGl0KCdcXG4nKVxuICAgICwgc3RhcnQgPSBNYXRoLm1heChsaW5lbm8gLSBjb250ZXh0LCAwKVxuICAgICwgZW5kID0gTWF0aC5taW4obGluZXMubGVuZ3RoLCBsaW5lbm8gKyBjb250ZXh0KTtcblxuICAvLyBFcnJvciBjb250ZXh0XG4gIHZhciBjb250ZXh0ID0gbGluZXMuc2xpY2Uoc3RhcnQsIGVuZCkubWFwKGZ1bmN0aW9uKGxpbmUsIGkpe1xuICAgIHZhciBjdXJyID0gaSArIHN0YXJ0ICsgMTtcbiAgICByZXR1cm4gKGN1cnIgPT0gbGluZW5vID8gJyAgPiAnIDogJyAgICAnKVxuICAgICAgKyBjdXJyXG4gICAgICArICd8ICdcbiAgICAgICsgbGluZTtcbiAgfSkuam9pbignXFxuJyk7XG5cbiAgLy8gQWx0ZXIgZXhjZXB0aW9uIG1lc3NhZ2VcbiAgZXJyLnBhdGggPSBmaWxlbmFtZTtcbiAgZXJyLm1lc3NhZ2UgPSAoZmlsZW5hbWUgfHwgJ0phZGUnKSArICc6JyArIGxpbmVub1xuICAgICsgJ1xcbicgKyBjb250ZXh0ICsgJ1xcblxcbicgKyBlcnIubWVzc2FnZTtcbiAgdGhyb3cgZXJyO1xufTtcblxuZXhwb3J0cy5EZWJ1Z0l0ZW0gPSBmdW5jdGlvbiBEZWJ1Z0l0ZW0obGluZW5vLCBmaWxlbmFtZSkge1xuICB0aGlzLmxpbmVubyA9IGxpbmVubztcbiAgdGhpcy5maWxlbmFtZSA9IGZpbGVuYW1lO1xufVxuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vamFkZS9saWIvcnVudGltZS5qc1xuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qIChpZ25vcmVkKSAqL1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZnMgKGlnbm9yZWQpXG4gKiogbW9kdWxlIGlkID0gM1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGphZGUgPSByZXF1aXJlKFwiL1VzZXJzL3N0ZXZlL1Byb2plY3RzL01pOS9tb2R1bGVzL21pOS10ZW1wbGF0ZXMtY29tbW9uL25vZGVfbW9kdWxlcy9qYWRlL2xpYi9ydW50aW1lLmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRlbXBsYXRlKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGphZGVfbWl4aW5zID0ge307XG52YXIgamFkZV9pbnRlcnA7XG47dmFyIGxvY2Fsc19mb3Jfd2l0aCA9IChsb2NhbHMgfHwge30pOyhmdW5jdGlvbiAobW9kZWwsIHBhcnRpYWxzKSB7XG5idWYucHVzaChcIjxkaXYgZGF0YS1tb2R1bGU9XFxcInZpZGVvXFxcIlwiICsgKGphZGUuYXR0cihcImRhdGEtdmlkZW9cIiwgbW9kZWwudXJuLCB0cnVlLCBmYWxzZSkpICsgXCIgZGF0YS1jYXRlZ29yeS1uYW1lPVxcXCJNU05WaWRlb19DYXRcXFwiIGRhdGEtY2F0ZWdvcnktdmFsdWU9XFxcImF1c3lkbmV5XFxcIiBjbGFzcz1cXFwidmlkZW8tYmxvY2sgbW9kdWxlXFxcIj48ZGl2XCIgKyAoamFkZS5hdHRyKFwiaWRcIiwgbW9kZWwudmlkZW9JZCwgdHJ1ZSwgZmFsc2UpKSArIFwiIGNsYXNzPVxcXCJ2aWRlby1ibG9ja19fcGxheWVyXFxcIj48L2Rpdj48ZGl2IGNsYXNzPVxcXCJ2aWRlby1ibG9ja19faW1hZ2VcXFwiPlwiKTtcbmlmICggbW9kZWwubWVkaWEpXG57XG5idWYucHVzaChudWxsID09IChqYWRlX2ludGVycCA9IHBhcnRpYWxzLmltYWdlUmVzaXplcih7bW9kZWw6IG1vZGVsLm1lZGlhfSkpID8gXCJcIiA6IGphZGVfaW50ZXJwKTtcbn1cbmJ1Zi5wdXNoKFwiPC9kaXY+PGRpdiBjbGFzcz1cXFwicGxheVxcXCI+PC9kaXY+PC9kaXY+XCIpO30uY2FsbCh0aGlzLFwibW9kZWxcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLm1vZGVsOnR5cGVvZiBtb2RlbCE9PVwidW5kZWZpbmVkXCI/bW9kZWw6dW5kZWZpbmVkLFwicGFydGlhbHNcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLnBhcnRpYWxzOnR5cGVvZiBwYXJ0aWFscyE9PVwidW5kZWZpbmVkXCI/cGFydGlhbHM6dW5kZWZpbmVkKSk7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy92aWRlby1ibG9jay5qYWRlXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGphZGUgPSByZXF1aXJlKFwiL1VzZXJzL3N0ZXZlL1Byb2plY3RzL01pOS9tb2R1bGVzL21pOS10ZW1wbGF0ZXMtY29tbW9uL25vZGVfbW9kdWxlcy9qYWRlL2xpYi9ydW50aW1lLmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRlbXBsYXRlKGxvY2Fscykge1xudmFyIGJ1ZiA9IFtdO1xudmFyIGphZGVfbWl4aW5zID0ge307XG52YXIgamFkZV9pbnRlcnA7XG47dmFyIGxvY2Fsc19mb3Jfd2l0aCA9IChsb2NhbHMgfHwge30pOyhmdW5jdGlvbiAobW9kZWwpIHtcbmJ1Zi5wdXNoKFwiPGRpdlwiICsgKGphZGUuYXR0cihcImRhdGEtc3JjXCIsIG1vZGVsLnVybCwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJkYXRhLXdpZGdldC1pZFwiLCBtb2RlbC53aWRnZXRJZCwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJkYXRhLW9iLXRlbXBsYXRlXCIsIG1vZGVsLm9iVGVtcGxhdGUsIHRydWUsIGZhbHNlKSkgKyBcIiBjbGFzcz1cXFwiT1VUQlJBSU5cXFwiPjwvZGl2PjxzY3JpcHQgdHlwZT1cXFwidGV4dC9qYXZhc2NyaXB0XFxcIiBhc3luYz1cXFwiYXN5bmNcXFwiIHNyYz1cXFwiaHR0cDovL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzXFxcIj48L3NjcmlwdD5cIik7fS5jYWxsKHRoaXMsXCJtb2RlbFwiIGluIGxvY2Fsc19mb3Jfd2l0aD9sb2NhbHNfZm9yX3dpdGgubW9kZWw6dHlwZW9mIG1vZGVsIT09XCJ1bmRlZmluZWRcIj9tb2RlbDp1bmRlZmluZWQpKTs7cmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvdGVtcGxhdGVzL291dGJyYWluLmphZGVcbiAqKiBtb2R1bGUgaWQgPSA1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgamFkZSA9IHJlcXVpcmUoXCIvVXNlcnMvc3RldmUvUHJvamVjdHMvTWk5L21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vbm9kZV9tb2R1bGVzL2phZGUvbGliL3J1bnRpbWUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGVtcGxhdGUobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgamFkZV9taXhpbnMgPSB7fTtcbnZhciBqYWRlX2ludGVycDtcbjt2YXIgbG9jYWxzX2Zvcl93aXRoID0gKGxvY2FscyB8fCB7fSk7KGZ1bmN0aW9uIChoZWFkZXJBY2Nlc3NvcnlMaW5rLCBoZWFkZXJDb250ZW50TGluaywgaGVhZGVyTGluaywgaW5jbHVkZVBhcnRpYWwsIGl0ZW1zLCB0aXRsZSwgdHJhY2tpbmdOYW1lLCB1bmRlZmluZWQsIHdpZGdldENsYXNzKSB7XG5qYWRlX21peGluc1tcImhlYWRlckNvbnRlbnRMaW5rXCJdID0gamFkZV9pbnRlcnAgPSBmdW5jdGlvbigpe1xudmFyIGJsb2NrID0gKHRoaXMgJiYgdGhpcy5ibG9jayksIGF0dHJpYnV0ZXMgPSAodGhpcyAmJiB0aGlzLmF0dHJpYnV0ZXMpIHx8IHt9O1xuaWYgKCBoZWFkZXJDb250ZW50TGluaylcbntcbmJ1Zi5wdXNoKFwiPGFcIiArIChqYWRlLmF0dHIoXCJocmVmXCIsIGhlYWRlckNvbnRlbnRMaW5rLCB0cnVlLCBmYWxzZSkpICsgKGphZGUuYXR0cihcImRhdGEtdHJhY2tpbmctbGluay1uYW1lXCIsIFwiXCIgKyAodHJhY2tpbmdOYW1lKSArIFwiLWhlYWRlclwiLCB0cnVlLCBmYWxzZSkpICsgXCI+PGgzIGNsYXNzPVxcXCJ3aWRnZXRfX2hlYWRlcl9fdGV4dFxcXCI+XCIgKyAoamFkZS5lc2NhcGUobnVsbCA9PSAoamFkZV9pbnRlcnAgPSB0aXRsZSkgPyBcIlwiIDogamFkZV9pbnRlcnApKSArIFwiPC9oMz48L2E+XCIpO1xufVxuZWxzZVxue1xuYnVmLnB1c2goXCI8aDMgY2xhc3M9XFxcIndpZGdldF9faGVhZGVyX190ZXh0XFxcIj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlX2ludGVycCA9IHRpdGxlKSA/IFwiXCIgOiBqYWRlX2ludGVycCkpICsgXCI8L2gzPlwiKTtcbn1cbn07XG5qYWRlX21peGluc1tcImhlYWRlckFjY2Vzc29yeUxpbmtcIl0gPSBqYWRlX2ludGVycCA9IGZ1bmN0aW9uKCl7XG52YXIgYmxvY2sgPSAodGhpcyAmJiB0aGlzLmJsb2NrKSwgYXR0cmlidXRlcyA9ICh0aGlzICYmIHRoaXMuYXR0cmlidXRlcykgfHwge307XG5pZiAoIGhlYWRlckFjY2Vzc29yeUxpbmspXG57XG5idWYucHVzaChcIjxhXCIgKyAoamFkZS5hdHRyKFwiaHJlZlwiLCBoZWFkZXJBY2Nlc3NvcnlMaW5rLCB0cnVlLCBmYWxzZSkpICsgKGphZGUuYXR0cihcImRhdGEtdHJhY2tpbmctbGluay1uYW1lXCIsIFwiXCIgKyAodHJhY2tpbmdOYW1lKSArIFwiLWhlYWRlclwiLCB0cnVlLCBmYWxzZSkpICsgXCI+PGRpdiBjbGFzcz1cXFwid2lkZ2V0X19oZWFkZXJfX2FjY2Vzc29yeVxcXCI+PC9kaXY+PC9hPlwiKTtcbn1cbmVsc2VcbntcbmJ1Zi5wdXNoKFwiPGRpdiBjbGFzcz1cXFwid2lkZ2V0X19oZWFkZXJfX2FjY2Vzc29yeVxcXCI+PC9kaXY+XCIpO1xufVxufTtcbmphZGVfbWl4aW5zW1wiaGVhZGVyTGlua1wiXSA9IGphZGVfaW50ZXJwID0gZnVuY3Rpb24oKXtcbnZhciBibG9jayA9ICh0aGlzICYmIHRoaXMuYmxvY2spLCBhdHRyaWJ1dGVzID0gKHRoaXMgJiYgdGhpcy5hdHRyaWJ1dGVzKSB8fCB7fTtcbmlmICggaGVhZGVyTGluaylcbntcbmJ1Zi5wdXNoKFwiPGFcIiArIChqYWRlLmF0dHIoXCJocmVmXCIsIGhlYWRlckxpbmssIHRydWUsIGZhbHNlKSkgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJcIiArICh0cmFja2luZ05hbWUpICsgXCItaGVhZGVyXCIsIHRydWUsIGZhbHNlKSkgKyBcIj48ZGl2IGNsYXNzPVxcXCJ3aWRnZXRfX2hlYWRlclxcXCI+XCIpO1xuamFkZV9taXhpbnNbXCJoZWFkZXJDb250ZW50TGlua1wiXSgpO1xuamFkZV9taXhpbnNbXCJoZWFkZXJBY2Nlc3NvcnlMaW5rXCJdKCk7XG5idWYucHVzaChcIjwvZGl2PjwvYT5cIik7XG59XG5lbHNlXG57XG5idWYucHVzaChcIjxkaXYgY2xhc3M9XFxcIndpZGdldF9faGVhZGVyXFxcIj5cIik7XG5qYWRlX21peGluc1tcImhlYWRlckNvbnRlbnRMaW5rXCJdKCk7XG5qYWRlX21peGluc1tcImhlYWRlckFjY2Vzc29yeUxpbmtcIl0oKTtcbmJ1Zi5wdXNoKFwiPC9kaXY+XCIpO1xufVxufTtcbmJ1Zi5wdXNoKFwiPGRpdiBkYXRhLW1vZHVsZT1cXFwiZGVjb3JhdG9ycy90cmFja2luZ0RlY29yYXRvclxcXCJcIiArIChqYWRlLmNscyhbJ3dpZGdldCcsJ21lZGlhLWxpc3QnLCdtb2R1bGUnLHdpZGdldENsYXNzXSwgW251bGwsbnVsbCxudWxsLHRydWVdKSkgKyBcIj5cIik7XG5qYWRlX21peGluc1tcImhlYWRlckxpbmtcIl0oKTtcbi8vIGl0ZXJhdGUgaXRlbXNcbjsoZnVuY3Rpb24oKXtcbiAgdmFyICQkb2JqID0gaXRlbXM7XG4gIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgJCRvYmoubGVuZ3RoKSB7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDAsICQkbCA9ICQkb2JqLmxlbmd0aDsgaW5kZXggPCAkJGw7IGluZGV4KyspIHtcbiAgICAgIHZhciBpdGVtID0gJCRvYmpbaW5kZXhdO1xuXG52YXIgaW1hZ2VMaW5rID0gaXRlbS5pbWFnZUxpbms7XG52YXIgbGluayA9IGl0ZW0ubGluaztcbnZhciBoZWFkaW5nID0gaXRlbS5oZWFkaW5nO1xudmFyIHRleHQgPSBpdGVtLnRleHQ7XG52YXIgbWVkaWEgPSBpdGVtLmltYWdlO1xuYnVmLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJtZWRpYS1ibG9ja1xcXCI+XCIpO1xuaWYgKCBpbWFnZUxpbmspXG57XG5idWYucHVzaChcIjxhXCIgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJcIiArICh0cmFja2luZ05hbWUpICsgXCItXCIgKyAoaW5kZXgpICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJocmVmXCIsIGltYWdlTGluaywgdHJ1ZSwgZmFsc2UpKSArIFwiIGNsYXNzPVxcXCJtZWRpYS1ibG9ja19fbGlua1xcXCI+PGRpdiBjbGFzcz1cXFwibWVkaWEtYmxvY2tfX21lZGlhXFxcIj5cIiArIChudWxsID09IChqYWRlX2ludGVycCA9IGluY2x1ZGVQYXJ0aWFsKCdpbWFnZS1yZXNpemVyLWZpZ3VyZS0tZXh0Jywge21lZGlhOiBtZWRpYX0pKSA/IFwiXCIgOiBqYWRlX2ludGVycCkgKyBcIjwvZGl2PjwvYT5cIik7XG59XG5lbHNlXG57XG5idWYucHVzaChcIjxkaXYgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX19tZWRpYVxcXCI+XCIgKyAobnVsbCA9PSAoamFkZV9pbnRlcnAgPSBpbmNsdWRlUGFydGlhbCgnaW1hZ2UtcmVzaXplci1maWd1cmUtLWV4dCcsIHttZWRpYTogbWVkaWF9KSkgPyBcIlwiIDogamFkZV9pbnRlcnApICsgXCI8L2Rpdj5cIik7XG59XG5pZiAoIGxpbmspXG57XG5idWYucHVzaChcIjxhXCIgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJcIiArICh0cmFja2luZ05hbWUpICsgXCItXCIgKyAoaW5kZXgpICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJocmVmXCIsIGxpbmssIHRydWUsIGZhbHNlKSkgKyBcIiBjbGFzcz1cXFwibWVkaWEtYmxvY2tfX2xpbmtcXFwiPjxkaXYgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX19ib2R5XFxcIj48aDMgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX19oZWFkaW5nXFxcIj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlX2ludGVycCA9IGhlYWRpbmcpID8gXCJcIiA6IGphZGVfaW50ZXJwKSkgKyBcIjwvaDM+PHAgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX190ZXh0XFxcIj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlX2ludGVycCA9IHRleHQpID8gXCJcIiA6IGphZGVfaW50ZXJwKSkgKyBcIjwvcD48L2Rpdj48L2E+XCIpO1xufVxuYnVmLnB1c2goXCI8L2Rpdj5cIik7XG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgdmFyICQkbCA9IDA7XG4gICAgZm9yICh2YXIgaW5kZXggaW4gJCRvYmopIHtcbiAgICAgICQkbCsrOyAgICAgIHZhciBpdGVtID0gJCRvYmpbaW5kZXhdO1xuXG52YXIgaW1hZ2VMaW5rID0gaXRlbS5pbWFnZUxpbms7XG52YXIgbGluayA9IGl0ZW0ubGluaztcbnZhciBoZWFkaW5nID0gaXRlbS5oZWFkaW5nO1xudmFyIHRleHQgPSBpdGVtLnRleHQ7XG52YXIgbWVkaWEgPSBpdGVtLmltYWdlO1xuYnVmLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJtZWRpYS1ibG9ja1xcXCI+XCIpO1xuaWYgKCBpbWFnZUxpbmspXG57XG5idWYucHVzaChcIjxhXCIgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJcIiArICh0cmFja2luZ05hbWUpICsgXCItXCIgKyAoaW5kZXgpICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJocmVmXCIsIGltYWdlTGluaywgdHJ1ZSwgZmFsc2UpKSArIFwiIGNsYXNzPVxcXCJtZWRpYS1ibG9ja19fbGlua1xcXCI+PGRpdiBjbGFzcz1cXFwibWVkaWEtYmxvY2tfX21lZGlhXFxcIj5cIiArIChudWxsID09IChqYWRlX2ludGVycCA9IGluY2x1ZGVQYXJ0aWFsKCdpbWFnZS1yZXNpemVyLWZpZ3VyZS0tZXh0Jywge21lZGlhOiBtZWRpYX0pKSA/IFwiXCIgOiBqYWRlX2ludGVycCkgKyBcIjwvZGl2PjwvYT5cIik7XG59XG5lbHNlXG57XG5idWYucHVzaChcIjxkaXYgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX19tZWRpYVxcXCI+XCIgKyAobnVsbCA9PSAoamFkZV9pbnRlcnAgPSBpbmNsdWRlUGFydGlhbCgnaW1hZ2UtcmVzaXplci1maWd1cmUtLWV4dCcsIHttZWRpYTogbWVkaWF9KSkgPyBcIlwiIDogamFkZV9pbnRlcnApICsgXCI8L2Rpdj5cIik7XG59XG5pZiAoIGxpbmspXG57XG5idWYucHVzaChcIjxhXCIgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJcIiArICh0cmFja2luZ05hbWUpICsgXCItXCIgKyAoaW5kZXgpICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJocmVmXCIsIGxpbmssIHRydWUsIGZhbHNlKSkgKyBcIiBjbGFzcz1cXFwibWVkaWEtYmxvY2tfX2xpbmtcXFwiPjxkaXYgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX19ib2R5XFxcIj48aDMgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX19oZWFkaW5nXFxcIj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlX2ludGVycCA9IGhlYWRpbmcpID8gXCJcIiA6IGphZGVfaW50ZXJwKSkgKyBcIjwvaDM+PHAgY2xhc3M9XFxcIm1lZGlhLWJsb2NrX190ZXh0XFxcIj5cIiArIChqYWRlLmVzY2FwZShudWxsID09IChqYWRlX2ludGVycCA9IHRleHQpID8gXCJcIiA6IGphZGVfaW50ZXJwKSkgKyBcIjwvcD48L2Rpdj48L2E+XCIpO1xufVxuYnVmLnB1c2goXCI8L2Rpdj5cIik7XG4gICAgfVxuXG4gIH1cbn0pLmNhbGwodGhpcyk7XG5cbmJ1Zi5wdXNoKFwiPC9kaXY+XCIpO30uY2FsbCh0aGlzLFwiaGVhZGVyQWNjZXNzb3J5TGlua1wiIGluIGxvY2Fsc19mb3Jfd2l0aD9sb2NhbHNfZm9yX3dpdGguaGVhZGVyQWNjZXNzb3J5TGluazp0eXBlb2YgaGVhZGVyQWNjZXNzb3J5TGluayE9PVwidW5kZWZpbmVkXCI/aGVhZGVyQWNjZXNzb3J5TGluazp1bmRlZmluZWQsXCJoZWFkZXJDb250ZW50TGlua1wiIGluIGxvY2Fsc19mb3Jfd2l0aD9sb2NhbHNfZm9yX3dpdGguaGVhZGVyQ29udGVudExpbms6dHlwZW9mIGhlYWRlckNvbnRlbnRMaW5rIT09XCJ1bmRlZmluZWRcIj9oZWFkZXJDb250ZW50TGluazp1bmRlZmluZWQsXCJoZWFkZXJMaW5rXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5oZWFkZXJMaW5rOnR5cGVvZiBoZWFkZXJMaW5rIT09XCJ1bmRlZmluZWRcIj9oZWFkZXJMaW5rOnVuZGVmaW5lZCxcImluY2x1ZGVQYXJ0aWFsXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5pbmNsdWRlUGFydGlhbDp0eXBlb2YgaW5jbHVkZVBhcnRpYWwhPT1cInVuZGVmaW5lZFwiP2luY2x1ZGVQYXJ0aWFsOnVuZGVmaW5lZCxcIml0ZW1zXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5pdGVtczp0eXBlb2YgaXRlbXMhPT1cInVuZGVmaW5lZFwiP2l0ZW1zOnVuZGVmaW5lZCxcInRpdGxlXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC50aXRsZTp0eXBlb2YgdGl0bGUhPT1cInVuZGVmaW5lZFwiP3RpdGxlOnVuZGVmaW5lZCxcInRyYWNraW5nTmFtZVwiIGluIGxvY2Fsc19mb3Jfd2l0aD9sb2NhbHNfZm9yX3dpdGgudHJhY2tpbmdOYW1lOnR5cGVvZiB0cmFja2luZ05hbWUhPT1cInVuZGVmaW5lZFwiP3RyYWNraW5nTmFtZTp1bmRlZmluZWQsXCJ1bmRlZmluZWRcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLnVuZGVmaW5lZDp0eXBlb2YgdW5kZWZpbmVkIT09XCJ1bmRlZmluZWRcIj91bmRlZmluZWQ6dW5kZWZpbmVkLFwid2lkZ2V0Q2xhc3NcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLndpZGdldENsYXNzOnR5cGVvZiB3aWRnZXRDbGFzcyE9PVwidW5kZWZpbmVkXCI/d2lkZ2V0Q2xhc3M6dW5kZWZpbmVkKSk7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy9tZWRpYS1saXN0LmphZGVcbiAqKiBtb2R1bGUgaWQgPSA2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgamFkZSA9IHJlcXVpcmUoXCIvVXNlcnMvc3RldmUvUHJvamVjdHMvTWk5L21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vbm9kZV9tb2R1bGVzL2phZGUvbGliL3J1bnRpbWUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGVtcGxhdGUobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgamFkZV9taXhpbnMgPSB7fTtcbnZhciBqYWRlX2ludGVycDtcbjt2YXIgbG9jYWxzX2Zvcl93aXRoID0gKGxvY2FscyB8fCB7fSk7KGZ1bmN0aW9uIChmYWNlYm9va1VybCwgaW5jbHVkZVBhcnRpYWwsIGxpbmtzLCB0d2l0dGVyVXJsLCB1bmRlZmluZWQpIHtcbmphZGVfbWl4aW5zW1wiZ2FsbGVyeUFkXCJdID0gamFkZV9pbnRlcnAgPSBmdW5jdGlvbigpe1xudmFyIGJsb2NrID0gKHRoaXMgJiYgdGhpcy5ibG9jayksIGF0dHJpYnV0ZXMgPSAodGhpcyAmJiB0aGlzLmF0dHJpYnV0ZXMpIHx8IHt9O1xuYnVmLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJnYWxsZXJ5X191dGlsaXR5LWFkXFxcIj5cIiArIChudWxsID09IChqYWRlX2ludGVycCA9IGluY2x1ZGVQYXJ0aWFsKCdhZC0tZXh0Jywge2FkVHlwZTogJ01FRElVTScsIGxvY2F0aW9uOiAnVE9QLjEnLCBjbGFzc2VzOiAnbW9kdWxlJywgbW9kdWxlRGVjb3JhdG9yOiAnZGVmYXVsdC5hZCcsIG1vZHVsZUlkOiAnZGVmYXVsdC5mb290ZXIuYWQnLCBtaW5XaWR0aDogJzc2OCd9KSkgPyBcIlwiIDogamFkZV9pbnRlcnApICsgXCI8L2Rpdj5cIik7XG59O1xuYnVmLnB1c2goXCI8ZGl2IGlkPVxcXCJmb290ZXJcXFwiIGRhdGEtbW9kdWxlPVxcXCJkZWNvcmF0b3JzL3RyYWNraW5nRGVjb3JhdG9yXFxcIiBjbGFzcz1cXFwiZm9vdGVyX19jb250YWluZXIgbW9kdWxlXFxcIj48ZGl2IGRhdGEtbW9kdWxlPVxcXCJkZWNvcmF0b3JzL2ZpeGVkRm9vdGVyRGVjb3JhdG9yXFxcIiBkYXRhLWFuY2hvcj1cXFwiI2Zvb3RlclxcXCIgY2xhc3M9XFxcImZvb3RlciBtb2R1bGVcXFwiPlwiKTtcbmphZGVfbWl4aW5zW1wiZ2FsbGVyeUFkXCJdKCk7XG5idWYucHVzaChcIjxkaXYgY2xhc3M9XFxcImZvb3Rlcl9faGVhZGVyXFxcIj48YSBocmVmPVxcXCIvXFxcIiBkYXRhLXRyYWNraW5nLWxpbmstbmFtZT1cXFwiZm9vdGVyX2xvZ29cXFwiIGNsYXNzPVxcXCJmb290ZXJfX2xvZ29cXFwiPjwvYT48YSB0YXJnZXQ9XFxcIl9ibGFua1xcXCJcIiArIChqYWRlLmF0dHIoXCJocmVmXCIsIGZhY2Vib29rVXJsLCB0cnVlLCBmYWxzZSkpICsgXCIgZGF0YS10cmFja2luZy1saW5rLW5hbWU9XFxcImZvb3Rlcl9mYWNlYm9va1xcXCIgY2xhc3M9XFxcImZvb3Rlcl9fbGlua19fZmFjZWJvb2tcXFwiPjwvYT48YSB0YXJnZXQ9XFxcIl9ibGFua1xcXCJcIiArIChqYWRlLmF0dHIoXCJocmVmXCIsIHR3aXR0ZXJVcmwsIHRydWUsIGZhbHNlKSkgKyBcIiBkYXRhLXRyYWNraW5nLWxpbmstbmFtZT1cXFwiZm9vdGVyX3R3aXR0ZXJcXFwiIGNsYXNzPVxcXCJmb290ZXJfX2xpbmtfX3R3aXR0ZXJcXFwiPjwvYT48L2Rpdj48ZGl2IGNsYXNzPVxcXCJmb290ZXJfX2xpbmtzXFxcIj48dWwgY2xhc3M9XFxcImZvb3Rlcl9fbGlzdFxcXCI+XCIpO1xuLy8gaXRlcmF0ZSBsaW5rc1xuOyhmdW5jdGlvbigpe1xuICB2YXIgJCRvYmogPSBsaW5rcztcbiAgaWYgKCdudW1iZXInID09IHR5cGVvZiAkJG9iai5sZW5ndGgpIHtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMCwgJCRsID0gJCRvYmoubGVuZ3RoOyBpbmRleCA8ICQkbDsgaW5kZXgrKykge1xuICAgICAgdmFyIGxpbmsgPSAkJG9ialtpbmRleF07XG5cbmJ1Zi5wdXNoKFwiPGxpIGNsYXNzPVxcXCJmb290ZXJfX2l0ZW1cXFwiPjxhXCIgKyAoamFkZS5hdHRyKFwiaHJlZlwiLCBsaW5rLnVybCwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJ0aXRsZVwiLCBsaW5rLl9uYW1lLCB0cnVlLCBmYWxzZSkpICsgXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiXCIgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJmb290ZXItXCIgKyAoaW5kZXgpICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIFwiPlwiICsgKGphZGUuZXNjYXBlKChqYWRlX2ludGVycCA9IGxpbmsuX25hbWUpID09IG51bGwgPyAnJyA6IGphZGVfaW50ZXJwKSkgKyBcIjwvYT48L2xpPlwiKTtcbiAgICB9XG5cbiAgfSBlbHNlIHtcbiAgICB2YXIgJCRsID0gMDtcbiAgICBmb3IgKHZhciBpbmRleCBpbiAkJG9iaikge1xuICAgICAgJCRsKys7ICAgICAgdmFyIGxpbmsgPSAkJG9ialtpbmRleF07XG5cbmJ1Zi5wdXNoKFwiPGxpIGNsYXNzPVxcXCJmb290ZXJfX2l0ZW1cXFwiPjxhXCIgKyAoamFkZS5hdHRyKFwiaHJlZlwiLCBsaW5rLnVybCwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJ0aXRsZVwiLCBsaW5rLl9uYW1lLCB0cnVlLCBmYWxzZSkpICsgXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiXCIgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJmb290ZXItXCIgKyAoaW5kZXgpICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIFwiPlwiICsgKGphZGUuZXNjYXBlKChqYWRlX2ludGVycCA9IGxpbmsuX25hbWUpID09IG51bGwgPyAnJyA6IGphZGVfaW50ZXJwKSkgKyBcIjwvYT48L2xpPlwiKTtcbiAgICB9XG5cbiAgfVxufSkuY2FsbCh0aGlzKTtcblxuYnVmLnB1c2goXCI8L3VsPjxhIGhyZWY9XFxcIiNcXFwiIGRhdGEtdHJhY2tpbmctbGluay1uYW1lPVxcXCJmb290ZXJfYmFja3RvdG9wXFxcIiBjbGFzcz1cXFwiZm9vdGVyX190b3AtbGlua1xcXCI+PGRpdiBjbGFzcz1cXFwiZm9vdGVyX190b3AtbGluay0taWNvblxcXCI+PC9kaXY+PC9hPjwvZGl2PjwvZGl2PjwvZGl2PlwiKTt9LmNhbGwodGhpcyxcImZhY2Vib29rVXJsXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5mYWNlYm9va1VybDp0eXBlb2YgZmFjZWJvb2tVcmwhPT1cInVuZGVmaW5lZFwiP2ZhY2Vib29rVXJsOnVuZGVmaW5lZCxcImluY2x1ZGVQYXJ0aWFsXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5pbmNsdWRlUGFydGlhbDp0eXBlb2YgaW5jbHVkZVBhcnRpYWwhPT1cInVuZGVmaW5lZFwiP2luY2x1ZGVQYXJ0aWFsOnVuZGVmaW5lZCxcImxpbmtzXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5saW5rczp0eXBlb2YgbGlua3MhPT1cInVuZGVmaW5lZFwiP2xpbmtzOnVuZGVmaW5lZCxcInR3aXR0ZXJVcmxcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLnR3aXR0ZXJVcmw6dHlwZW9mIHR3aXR0ZXJVcmwhPT1cInVuZGVmaW5lZFwiP3R3aXR0ZXJVcmw6dW5kZWZpbmVkLFwidW5kZWZpbmVkXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC51bmRlZmluZWQ6dHlwZW9mIHVuZGVmaW5lZCE9PVwidW5kZWZpbmVkXCI/dW5kZWZpbmVkOnVuZGVmaW5lZCkpOztyZXR1cm4gYnVmLmpvaW4oXCJcIik7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy90ZW1wbGF0ZXMvZm9vdGVyLmphZGVcbiAqKiBtb2R1bGUgaWQgPSA3XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgamFkZSA9IHJlcXVpcmUoXCIvVXNlcnMvc3RldmUvUHJvamVjdHMvTWk5L21vZHVsZXMvbWk5LXRlbXBsYXRlcy1jb21tb24vbm9kZV9tb2R1bGVzL2phZGUvbGliL3J1bnRpbWUuanNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGVtcGxhdGUobG9jYWxzKSB7XG52YXIgYnVmID0gW107XG52YXIgamFkZV9taXhpbnMgPSB7fTtcbnZhciBqYWRlX2ludGVycDtcbjt2YXIgbG9jYWxzX2Zvcl93aXRoID0gKGxvY2FscyB8fCB7fSk7KGZ1bmN0aW9uIChjbGFtcCwgaW5jbHVkZVBhcnRpYWwsIGtpY2tlciwgc2V0dGluZ3MsIHN0b3J5QmxvY2spIHtcbmJ1Zi5wdXNoKFwiPGRpdlwiICsgKGphZGUuYXR0cihcImRhdGEtY29udGVudC1pZFwiLCBzdG9yeUJsb2NrLmlkLCB0cnVlLCBmYWxzZSkpICsgKGphZGUuY2xzKFsnc3RvcnlibG9jaycsIXN0b3J5QmxvY2suaW1hZ2UgPyAnaGFzLW5vLWltYWdlJyA6ICcnXSwgW251bGwsdHJ1ZV0pKSArIFwiPlwiKTtcbmlmICggc3RvcnlCbG9jay5pbWFnZSlcbntcbmJ1Zi5wdXNoKFwiPGFcIiArIChqYWRlLmF0dHIoXCJocmVmXCIsIFwiXCIgKyAoc3RvcnlCbG9jay5saW5rKSArIFwiXCIsIHRydWUsIGZhbHNlKSkgKyAoamFkZS5hdHRyKFwiZGF0YS10cmFja2luZy1saW5rLW5hbWVcIiwgXCJmZWVkX1wiICsgKHN0b3J5QmxvY2sudGVtcGxhdGVOYW1lKSArIFwiX2ltYWdlXCIsIHRydWUsIGZhbHNlKSkgKyAoamFkZS5jbHMoW1wic3RvcnktYmxvY2tfX2ltYWdlIGhlcm8gXCIgKyAoc3RvcnlCbG9jay50ZW1wbGF0ZU5hbWUpICsgXCIgXCIgKyAoc3RvcnlCbG9jay5wb3J0cmFpdENsYXNzZXMpICsgXCIgXCIgKyAoc3RvcnlCbG9jay5wb3J0cmFpdEhlcm8pICsgXCJcIl0sIFt0cnVlXSkpICsgXCI+XCIpO1xuaWYgKCBraWNrZXIpXG57XG5idWYucHVzaChcIjxkaXYgY2xhc3M9XFxcInN0b3J5LWJsb2NrX19raWNrZXItb3V0ZXJcXFwiPjxkaXYgY2xhc3M9XFxcInN0b3J5LWJsb2NrX19raWNrZXJcXFwiPjwvZGl2PjwvZGl2PlwiKTtcbn1cbmJ1Zi5wdXNoKChudWxsID09IChqYWRlX2ludGVycCA9IGluY2x1ZGVQYXJ0aWFsKCdpbWFnZS1yZXNpemVyLWZpZ3VyZS0tZXh0Jywge21lZGlhOiBzdG9yeUJsb2NrLmltYWdlfSkpID8gXCJcIiA6IGphZGVfaW50ZXJwKSArIFwiPC9hPlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPGRpdlwiICsgKGphZGUuY2xzKFsndGV4dC13cmFwcGVyJyxjbGFtcF0sIFtudWxsLHRydWVdKSkgKyBcIj48YVwiICsgKGphZGUuYXR0cihcImhyZWZcIiwgXCJcIiArIChzdG9yeUJsb2NrLmxpbmspICsgXCJcIiwgdHJ1ZSwgZmFsc2UpKSArIChqYWRlLmF0dHIoXCJkYXRhLXRyYWNraW5nLWxpbmstbmFtZVwiLCBcImZlZWRfXCIgKyAoc3RvcnlCbG9jay50ZW1wbGF0ZU5hbWUpICsgXCJfaGVhZGluZVwiLCB0cnVlLCBmYWxzZSkpICsgXCIgY2xhc3M9XFxcImhlYWRpbmctbGlua1xcXCI+XCIpO1xuaWYgKCAhc3RvcnlCbG9jay5pbWFnZSAmJiBzdG9yeUJsb2NrLmtpY2tlcilcbntcbmJ1Zi5wdXNoKFwiPGRpdiBjbGFzcz1cXFwic3RvcnktYmxvY2tfX2tpY2tlci1vdXRlclxcXCI+PGRpdiBjbGFzcz1cXFwic3RvcnktYmxvY2tfX2tpY2tlclxcXCI+XCIgKyAobnVsbCA9PSAoamFkZV9pbnRlcnAgPSBzdG9yeUJsb2NrLmtpY2tlcikgPyBcIlwiIDogamFkZV9pbnRlcnApICsgXCI8L2Rpdj48L2Rpdj5cIik7XG59XG5idWYucHVzaChcIjxkaXYgY2xhc3M9XFxcInN0b3J5LWJsb2NrX19oZWFkbGluZVxcXCI+XCIgKyAobnVsbCA9PSAoamFkZV9pbnRlcnAgPSBzdG9yeUJsb2NrLmhlYWRsaW5lKSA/IFwiXCIgOiBqYWRlX2ludGVycCkgKyBcIjwvZGl2PjwvYT48cCBjbGFzcz1cXFwic3RvcnktYmxvY2tfX3N0YW5kZmlyc3RcXFwiPlwiICsgKG51bGwgPT0gKGphZGVfaW50ZXJwID0gc3RvcnlCbG9jay5zdGFuZGZpcnN0KSA/IFwiXCIgOiBqYWRlX2ludGVycCkgKyBcIjwvcD48L2Rpdj48ZGl2IGNsYXNzPVxcXCJzdG9yeS1ibG9ja19fYnlsaW5lXFxcIj5cIik7XG5pZiAoIHN0b3J5QmxvY2suc2VjdGlvblRhZylcbntcbmJ1Zi5wdXNoKFwiPGRpdiBjbGFzcz1cXFwic3RvcnktYmxvY2tfX3NlY3Rpb24tdGFnXFxcIj5cIiArIChudWxsID09IChqYWRlX2ludGVycCA9IHN0b3J5QmxvY2suc2VjdGlvblRhZykgPyBcIlwiIDogamFkZV9pbnRlcnApICsgXCI8L2Rpdj5cIik7XG59XG5pZiAoIHN0b3J5QmxvY2suYXV0aG9yKVxue1xuYnVmLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJhdXRob3JcXFwiPjxzcGFuPkJ5PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJhdXRob3JfX25hbWVcXFwiPlwiICsgKG51bGwgPT0gKGphZGVfaW50ZXJwID0gc3RvcnlCbG9jay5hdXRob3IpID8gXCJcIiA6IGphZGVfaW50ZXJwKSArIFwiPC9zcGFuPjwvZGl2PlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPHNwYW4gY2xhc3M9XFxcInN0b3J5LWJsb2NrX190aW1lIHRpbWVcXFwiPlwiKTtcbmlmICggc3RvcnlCbG9jay5kaXNwbGF5VGltZSlcbntcbmJ1Zi5wdXNoKG51bGwgPT0gKGphZGVfaW50ZXJwID0gc3RvcnlCbG9jay5kaXNwbGF5VGltZSkgPyBcIlwiIDogamFkZV9pbnRlcnApO1xufVxuYnVmLnB1c2goXCI8L3NwYW4+XCIpO1xuaWYgKCBzZXR0aW5ncy5lbmFibGVHaWd5YVNoYXJpbmdCdXR0b25zKVxue1xuYnVmLnB1c2goXCI8ZGl2IGNsYXNzPVxcXCJzdG9yeS1ibG9ja19fc2hhcmUgc2hhcmUtLXNpbXBsZVxcXCI+XCIpO1xuc3RvcnlCbG9jay5pc1Rha2VvdmVyID0gdHJ1ZVxuYnVmLnB1c2goKG51bGwgPT0gKGphZGVfaW50ZXJwID0gaW5jbHVkZVBhcnRpYWwoJ3NoYXJlLS1leHQnLCB7Y29udGVudDogc3RvcnlCbG9ja30pKSA/IFwiXCIgOiBqYWRlX2ludGVycCkgKyBcIjwvZGl2PlwiKTtcbn1cbmJ1Zi5wdXNoKFwiPC9kaXY+PC9kaXY+XCIpO30uY2FsbCh0aGlzLFwiY2xhbXBcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLmNsYW1wOnR5cGVvZiBjbGFtcCE9PVwidW5kZWZpbmVkXCI/Y2xhbXA6dW5kZWZpbmVkLFwiaW5jbHVkZVBhcnRpYWxcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLmluY2x1ZGVQYXJ0aWFsOnR5cGVvZiBpbmNsdWRlUGFydGlhbCE9PVwidW5kZWZpbmVkXCI/aW5jbHVkZVBhcnRpYWw6dW5kZWZpbmVkLFwia2lja2VyXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5raWNrZXI6dHlwZW9mIGtpY2tlciE9PVwidW5kZWZpbmVkXCI/a2lja2VyOnVuZGVmaW5lZCxcInNldHRpbmdzXCIgaW4gbG9jYWxzX2Zvcl93aXRoP2xvY2Fsc19mb3Jfd2l0aC5zZXR0aW5nczp0eXBlb2Ygc2V0dGluZ3MhPT1cInVuZGVmaW5lZFwiP3NldHRpbmdzOnVuZGVmaW5lZCxcInN0b3J5QmxvY2tcIiBpbiBsb2NhbHNfZm9yX3dpdGg/bG9jYWxzX2Zvcl93aXRoLnN0b3J5QmxvY2s6dHlwZW9mIHN0b3J5QmxvY2shPT1cInVuZGVmaW5lZFwiP3N0b3J5QmxvY2s6dW5kZWZpbmVkKSk7O3JldHVybiBidWYuam9pbihcIlwiKTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy9zdG9yeS1ibG9jay5qYWRlXG4gKiogbW9kdWxlIGlkID0gOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==