(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  author: __webpack_require__(/*! ../templates/author */ 1),
	  videoBlock: __webpack_require__(/*! ../templates/video-block */ 4),
	  outbrain: __webpack_require__(/*! ../templates/outbrain */ 5),
	  mediaList: __webpack_require__(/*! ../templates/media-list */ 6),
	  footer: __webpack_require__(/*! ../templates/footer */ 7),
	  storyBlock: __webpack_require__(/*! ../templates/story-block */ 8)
	};


/***/ },
/* 1 */
/*!***********************************!*\
  !*** ./src/templates/author.jade ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (author, model) {
	var image = model.image;
	var name = model.name;
	if ( author)
	{
	buf.push("<div class=\"author\">");
	if ( image)
	{
	var url = image.url;
	var alt = image.alt;
	buf.push("<span class=\"author__pic\"><img" + (jade.attr("src", url, true, false)) + (jade.attr("alt", alt, true, false)) + "/></span>");
	}
	buf.push("<span>" + (jade.escape(null == (jade_interp = 'By ') ? "" : jade_interp)) + "</span><span class=\"author__name\">" + (null == (jade_interp = name) ? "" : jade_interp) + "</span></div>");
	}}.call(this,"author" in locals_for_with?locals_for_with.author:typeof author!=="undefined"?author:undefined,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 2 */
/*!*******************************!*\
  !*** ./~/jade/lib/runtime.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(/*! fs */ 3).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 3 */
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 4 */
/*!****************************************!*\
  !*** ./src/templates/video-block.jade ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model, partials) {
	buf.push("<div data-module=\"video\"" + (jade.attr("data-video", model.urn, true, false)) + " data-category-name=\"MSNVideo_Cat\" data-category-value=\"ausydney\" class=\"video-block module\"><div" + (jade.attr("id", model.videoId, true, false)) + " class=\"video-block__player\"></div><div class=\"video-block__image\">");
	if ( model.media)
	{
	buf.push(null == (jade_interp = partials.imageResizer({model: model.media})) ? "" : jade_interp);
	}
	buf.push("</div><div class=\"play\"></div></div>");}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined,"partials" in locals_for_with?locals_for_with.partials:typeof partials!=="undefined"?partials:undefined));;return buf.join("");
	}

/***/ },
/* 5 */
/*!*************************************!*\
  !*** ./src/templates/outbrain.jade ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model) {
	buf.push("<div" + (jade.attr("data-src", model.url, true, false)) + (jade.attr("data-widget-id", model.widgetId, true, false)) + (jade.attr("data-ob-template", model.obTemplate, true, false)) + " class=\"OUTBRAIN\"></div><script type=\"text/javascript\" async=\"async\" src=\"http://widgets.outbrain.com/outbrain.js\"></script>");}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 6 */
/*!***************************************!*\
  !*** ./src/templates/media-list.jade ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (headerAccessoryLink, headerContentLink, headerLink, includePartial, items, title, trackingName, undefined, widgetClass) {
	jade_mixins["headerContentLink"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	if ( headerContentLink)
	{
	buf.push("<a" + (jade.attr("href", headerContentLink, true, false)) + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-header", true, false)) + "><h3 class=\"widget__header__text\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h3></a>");
	}
	else
	{
	buf.push("<h3 class=\"widget__header__text\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h3>");
	}
	};
	jade_mixins["headerAccessoryLink"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	if ( headerAccessoryLink)
	{
	buf.push("<a" + (jade.attr("href", headerAccessoryLink, true, false)) + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-header", true, false)) + "><div class=\"widget__header__accessory\"></div></a>");
	}
	else
	{
	buf.push("<div class=\"widget__header__accessory\"></div>");
	}
	};
	jade_mixins["headerLink"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	if ( headerLink)
	{
	buf.push("<a" + (jade.attr("href", headerLink, true, false)) + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-header", true, false)) + "><div class=\"widget__header\">");
	jade_mixins["headerContentLink"]();
	jade_mixins["headerAccessoryLink"]();
	buf.push("</div></a>");
	}
	else
	{
	buf.push("<div class=\"widget__header\">");
	jade_mixins["headerContentLink"]();
	jade_mixins["headerAccessoryLink"]();
	buf.push("</div>");
	}
	};
	buf.push("<div data-module=\"decorators/trackingDecorator\"" + (jade.cls(['widget','media-list','module',widgetClass], [null,null,null,true])) + ">");
	jade_mixins["headerLink"]();
	// iterate items
	;(function(){
	  var $$obj = items;
	  if ('number' == typeof $$obj.length) {
	
	    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
	      var item = $$obj[index];
	
	var imageLink = item.imageLink;
	var link = item.link;
	var heading = item.heading;
	var text = item.text;
	var media = item.image;
	buf.push("<div class=\"media-block\">");
	if ( imageLink)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", imageLink, true, false)) + " class=\"media-block__link\"><div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div></a>");
	}
	else
	{
	buf.push("<div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div>");
	}
	if ( link)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", link, true, false)) + " class=\"media-block__link\"><div class=\"media-block__body\"><h3 class=\"media-block__heading\">" + (jade.escape(null == (jade_interp = heading) ? "" : jade_interp)) + "</h3><p class=\"media-block__text\">" + (jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</p></div></a>");
	}
	buf.push("</div>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var index in $$obj) {
	      $$l++;      var item = $$obj[index];
	
	var imageLink = item.imageLink;
	var link = item.link;
	var heading = item.heading;
	var text = item.text;
	var media = item.image;
	buf.push("<div class=\"media-block\">");
	if ( imageLink)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", imageLink, true, false)) + " class=\"media-block__link\"><div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div></a>");
	}
	else
	{
	buf.push("<div class=\"media-block__media\">" + (null == (jade_interp = includePartial('image-resizer-figure--ext', {media: media})) ? "" : jade_interp) + "</div>");
	}
	if ( link)
	{
	buf.push("<a" + (jade.attr("data-tracking-link-name", "" + (trackingName) + "-" + (index) + "", true, false)) + (jade.attr("href", link, true, false)) + " class=\"media-block__link\"><div class=\"media-block__body\"><h3 class=\"media-block__heading\">" + (jade.escape(null == (jade_interp = heading) ? "" : jade_interp)) + "</h3><p class=\"media-block__text\">" + (jade.escape(null == (jade_interp = text) ? "" : jade_interp)) + "</p></div></a>");
	}
	buf.push("</div>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</div>");}.call(this,"headerAccessoryLink" in locals_for_with?locals_for_with.headerAccessoryLink:typeof headerAccessoryLink!=="undefined"?headerAccessoryLink:undefined,"headerContentLink" in locals_for_with?locals_for_with.headerContentLink:typeof headerContentLink!=="undefined"?headerContentLink:undefined,"headerLink" in locals_for_with?locals_for_with.headerLink:typeof headerLink!=="undefined"?headerLink:undefined,"includePartial" in locals_for_with?locals_for_with.includePartial:typeof includePartial!=="undefined"?includePartial:undefined,"items" in locals_for_with?locals_for_with.items:typeof items!=="undefined"?items:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"trackingName" in locals_for_with?locals_for_with.trackingName:typeof trackingName!=="undefined"?trackingName:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined,"widgetClass" in locals_for_with?locals_for_with.widgetClass:typeof widgetClass!=="undefined"?widgetClass:undefined));;return buf.join("");
	}

/***/ },
/* 7 */
/*!***********************************!*\
  !*** ./src/templates/footer.jade ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (facebookUrl, includePartial, links, twitterUrl, undefined) {
	jade_mixins["galleryAd"] = jade_interp = function(){
	var block = (this && this.block), attributes = (this && this.attributes) || {};
	buf.push("<div class=\"gallery__utility-ad\">" + (null == (jade_interp = includePartial('ad--ext', {adType: 'MEDIUM', location: 'TOP.1', classes: 'module', moduleDecorator: 'default.ad', moduleId: 'default.footer.ad', minWidth: '768'})) ? "" : jade_interp) + "</div>");
	};
	buf.push("<div id=\"footer\" data-module=\"decorators/trackingDecorator\" class=\"footer__container module\"><div data-module=\"decorators/fixedFooterDecorator\" data-anchor=\"#footer\" class=\"footer module\">");
	jade_mixins["galleryAd"]();
	buf.push("<div class=\"footer__header\"><a href=\"/\" data-tracking-link-name=\"footer_logo\" class=\"footer__logo\"></a><a target=\"_blank\"" + (jade.attr("href", facebookUrl, true, false)) + " data-tracking-link-name=\"footer_facebook\" class=\"footer__link__facebook\"></a><a target=\"_blank\"" + (jade.attr("href", twitterUrl, true, false)) + " data-tracking-link-name=\"footer_twitter\" class=\"footer__link__twitter\"></a></div><div class=\"footer__links\"><ul class=\"footer__list\">");
	// iterate links
	;(function(){
	  var $$obj = links;
	  if ('number' == typeof $$obj.length) {
	
	    for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
	      var link = $$obj[index];
	
	buf.push("<li class=\"footer__item\"><a" + (jade.attr("href", link.url, true, false)) + (jade.attr("title", link._name, true, false)) + " target=\"_blank\"" + (jade.attr("data-tracking-link-name", "footer-" + (index) + "", true, false)) + ">" + (jade.escape((jade_interp = link._name) == null ? '' : jade_interp)) + "</a></li>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var index in $$obj) {
	      $$l++;      var link = $$obj[index];
	
	buf.push("<li class=\"footer__item\"><a" + (jade.attr("href", link.url, true, false)) + (jade.attr("title", link._name, true, false)) + " target=\"_blank\"" + (jade.attr("data-tracking-link-name", "footer-" + (index) + "", true, false)) + ">" + (jade.escape((jade_interp = link._name) == null ? '' : jade_interp)) + "</a></li>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</ul><a href=\"#\" data-tracking-link-name=\"footer_backtotop\" class=\"footer__top-link\"><div class=\"footer__top-link--icon\"></div></a></div></div></div>");}.call(this,"facebookUrl" in locals_for_with?locals_for_with.facebookUrl:typeof facebookUrl!=="undefined"?facebookUrl:undefined,"includePartial" in locals_for_with?locals_for_with.includePartial:typeof includePartial!=="undefined"?includePartial:undefined,"links" in locals_for_with?locals_for_with.links:typeof links!=="undefined"?links:undefined,"twitterUrl" in locals_for_with?locals_for_with.twitterUrl:typeof twitterUrl!=="undefined"?twitterUrl:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined));;return buf.join("");
	}

/***/ },
/* 8 */
/*!****************************************!*\
  !*** ./src/templates/story-block.jade ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 2);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (clamp, includePartial, kicker, settings, storyBlock) {
	buf.push("<div" + (jade.attr("data-content-id", storyBlock.id, true, false)) + (jade.cls(['storyblock',!storyBlock.image ? 'has-no-image' : ''], [null,true])) + ">");
	if ( storyBlock.image)
	{
	buf.push("<a" + (jade.attr("href", "" + (storyBlock.link) + "", true, false)) + (jade.attr("data-tracking-link-name", "feed_" + (storyBlock.templateName) + "_image", true, false)) + (jade.cls(["story-block__image hero " + (storyBlock.templateName) + " " + (storyBlock.portraitClasses) + " " + (storyBlock.portraitHero) + ""], [true])) + ">");
	if ( kicker)
	{
	buf.push("<div class=\"story-block__kicker-outer\"><div class=\"story-block__kicker\"></div></div>");
	}
	buf.push((null == (jade_interp = includePartial('image-resizer-figure--ext', {media: storyBlock.image})) ? "" : jade_interp) + "</a>");
	}
	buf.push("<div" + (jade.cls(['text-wrapper',clamp], [null,true])) + "><a" + (jade.attr("href", "" + (storyBlock.link) + "", true, false)) + (jade.attr("data-tracking-link-name", "feed_" + (storyBlock.templateName) + "_headine", true, false)) + " class=\"heading-link\">");
	if ( !storyBlock.image && storyBlock.kicker)
	{
	buf.push("<div class=\"story-block__kicker-outer\"><div class=\"story-block__kicker\">" + (null == (jade_interp = storyBlock.kicker) ? "" : jade_interp) + "</div></div>");
	}
	buf.push("<div class=\"story-block__headline\">" + (null == (jade_interp = storyBlock.headline) ? "" : jade_interp) + "</div></a><p class=\"story-block__standfirst\">" + (null == (jade_interp = storyBlock.standfirst) ? "" : jade_interp) + "</p></div><div class=\"story-block__byline\">");
	if ( storyBlock.sectionTag)
	{
	buf.push("<div class=\"story-block__section-tag\">" + (null == (jade_interp = storyBlock.sectionTag) ? "" : jade_interp) + "</div>");
	}
	if ( storyBlock.author)
	{
	buf.push("<div class=\"author\"><span>By</span><span class=\"author__name\">" + (null == (jade_interp = storyBlock.author) ? "" : jade_interp) + "</span></div>");
	}
	buf.push("<span class=\"story-block__time time\">");
	if ( storyBlock.displayTime)
	{
	buf.push(null == (jade_interp = storyBlock.displayTime) ? "" : jade_interp);
	}
	buf.push("</span>");
	if ( settings.enableGigyaSharingButtons)
	{
	buf.push("<div class=\"story-block__share share--simple\">");
	storyBlock.isTakeover = true
	buf.push((null == (jade_interp = includePartial('share--ext', {content: storyBlock})) ? "" : jade_interp) + "</div>");
	}
	buf.push("</div></div>");}.call(this,"clamp" in locals_for_with?locals_for_with.clamp:typeof clamp!=="undefined"?clamp:undefined,"includePartial" in locals_for_with?locals_for_with.includePartial:typeof includePartial!=="undefined"?includePartial:undefined,"kicker" in locals_for_with?locals_for_with.kicker:typeof kicker!=="undefined"?kicker:undefined,"settings" in locals_for_with?locals_for_with.settings:typeof settings!=="undefined"?settings:undefined,"storyBlock" in locals_for_with?locals_for_with.storyBlock:typeof storyBlock!=="undefined"?storyBlock:undefined));;return buf.join("");
	}

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;base64,