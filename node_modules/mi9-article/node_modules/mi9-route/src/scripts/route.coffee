_ = require 'lodash'
Module = require 'mi9-module-common'

class Route extends Module

    # Call this static factory method directly to test the routes, instead of the `new Class` construct.
    @route: (req, res, next) -> new @(req, res, next)

    @_route: (args...) -> @route(args...)

    @asRoute: -> @_route.bind(this)

    asRoute: =>
        (req, res, next) =>
            @req = req
            @res = res
            @next = next
            @render()

    # The new instance immediately invokes the render method, when registered `asRoute`
    # We have hijacked the constructor here, hence the init method (if defined) would behave like a constructor
    constructor: (args...) ->
        if @constructor.caller is @constructor.route
            @_isRoute = true
            [@req, @res, @next] = args
            @_render = if @constructor.caller?.caller is @constructor._route then true else false
            unless @_render then @init?() else @render(@init?())
        else
            @_isRoute = false
            @init?(args...)

    # Report if instance is registered `asRoute`
    isRoute: -> @_isRoute

    render: -> throw new Error "`render` method not implemented in `#{@constructor.name}` route"

module.exports = Route
