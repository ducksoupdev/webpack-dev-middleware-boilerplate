sinon = require 'sinon'
_ = require 'lodash'
Route = require '../scripts/route'

describe 'Route', ->
    context '.route', ->
        it 'creates a new instance of the subclass', ->
            SubClass = class extends Route
            expect(SubClass.route() instanceof SubClass).to.be.true

    context '._route', ->
        it 'acts as a wrapper around the static method `route`', ->
            SubClass = class extends Route

            routeStub = sinon.stub(SubClass, 'route')
            SubClass._route('arg1', 'arg2', 'arg3')

            expect(routeStub.calledWith('arg1', 'arg2', 'arg3')).to.be.true

    context '.asRoute', ->
        it 'returns the static method `_route` as an express wrapper bound to the extended class', ->
            SubClass = class extends Route

            routeStub = sinon.stub(SubClass, 'route')
            route = SubClass.asRoute()

            route('arg1', 'arg2', 'arg3')
            expect(routeStub.calledWith('arg1', 'arg2', 'arg3')).to.be.true

    context '#constructor', ->
        context 'when called a route', ->
            it 'adds the first 3 arguments as req, res and next into the new object', ->
                SubClass = class extends Route

                reqSub = {req: {}}
                resStub = {res: {}}
                nextStub = {next: {}}
                instance = SubClass.route(reqSub, resStub, nextStub)

                expect(instance.req).to.equal(reqSub)
                expect(instance.res).to.equal(resStub)
                expect(instance.next).to.equal(nextStub)

            it 'saves the instance state as a route', ->
                SubClass = class extends Route
                instance = SubClass.route()

                expect(instance._isRoute).to.equal(true)

            context 'when instantiated via the `route` static method', ->
                it 'calls the init method, but does not call the render method', ->
                    SubClass = class extends Route
                        init: sinon.stub()
                        render: sinon.stub()

                    instance = SubClass.route()
                    expect(instance.init.calledOnce).to.be.true
                    expect(instance.render.notCalled).to.be.true

            context 'when instantiated via the `asRoute` static method', ->
                it 'first calls the init and then calls the render method', ->
                    initStub = sinon.stub()
                    renderStub = sinon.stub()
                    SubClass = class extends Route
                        init: initStub
                        render: renderStub

                    route = SubClass.asRoute()
                    instance = route({}, {}, {})
                    expect(instance.init.calledOnce).to.be.true
                    expect(instance.render.calledOnce).to.be.true

        context 'when called as a normal class', ->
            it 'saves the instance state as not a route', ->
                SubClass = class extends Route
                instance = new SubClass()

                expect(instance._isRoute).to.equal(false)

            it 'calls the init method like a constructor', ->
                SubClass = class extends Route
                    init: sinon.stub()

                arg1 = 'arg1'
                arg2 = 'arg2'
                arg3 = 'arg3'
                instance = new SubClass('arg1', 'arg2', 'arg3')
                expect(instance.init.calledWith(arg1, arg2, arg3)).to.be.true

    context '#isRoute', ->
        it 'returns the value true/false if a given instance is a route or not based on the internal route state variable `_isRoute`', ->
            SubClass = class extends Route

            expect(new SubClass().isRoute()).to.be.false
            expect(SubClass.route().isRoute()).to.be.true

    context '#render', ->
        it 'throws an error if not implemented by the subclass, when registered as a route', ->
            class SubClass extends Route

            route = SubClass.asRoute()
            expect(route).to.throw(/`render` method not implemented in `SubClass` route/)
