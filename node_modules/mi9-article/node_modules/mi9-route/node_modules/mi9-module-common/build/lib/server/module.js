module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var DependencyInjector, Mixin, Module,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	Mixin = __webpack_require__(/*! ./mixin */ 1);
	
	DependencyInjector = __webpack_require__(/*! ./dependency-injector */ 2);
	
	Module = (function(superClass) {
	  extend(Module, superClass);
	
	  function Module() {
	    return Module.__super__.constructor.apply(this, arguments);
	  }
	
	  Module.extend(DependencyInjector);
	
	  return Module;
	
	})(Mixin);
	
	module.exports = Module;


/***/ },
/* 1 */
/*!**********************************!*\
  !*** ./src/scripts/mixin.coffee ***!
  \**********************************/
/***/ function(module, exports) {

	var MODULE_KEYWORDS, Mixin,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	  slice = [].slice;
	
	MODULE_KEYWORDS = ['extended', 'included'];
	
	Mixin = (function() {
	  var propertyArgs;
	
	  function Mixin() {}
	
	  propertyArgs = function(args) {
	    var descriptor, name, scope;
	    scope = this.prototype;
	    if (args.length > 2) {
	      scope = args[0], name = args[1], descriptor = args[2];
	    } else {
	      name = args[0], descriptor = args[1];
	    }
	    return [scope, name, descriptor];
	  };
	
	  Mixin.extend = function(obj) {
	    var key, ref, value;
	    for (key in obj) {
	      value = obj[key];
	      if (indexOf.call(MODULE_KEYWORDS, key) < 0) {
	        this[key] = value;
	      }
	    }
	    if ((ref = obj.extended) != null) {
	      ref.apply(this);
	    }
	    return this;
	  };
	
	  Mixin.include = function(obj) {
	    var key, mixin, ref, value;
	    mixin = typeof obj === 'function' ? obj.prototype : obj;
	    for (key in mixin) {
	      value = mixin[key];
	      if (indexOf.call(MODULE_KEYWORDS, key) < 0) {
	        this.prototype[key] = value;
	      }
	    }
	    if ((ref = obj.included) != null) {
	      ref.apply(this);
	    }
	    return this;
	  };
	
	  Mixin.defineGetter = function() {
	    var args, getter, name, ref, scope;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    ref = propertyArgs.call(this, args), scope = ref[0], name = ref[1], getter = ref[2];
	    return Object.defineProperty(scope, name, {
	      configurable: true,
	      enumerable: true,
	      get: getter
	    });
	  };
	
	  Mixin.defineSetter = function() {
	    var args, name, ref, scope, setter;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    ref = propertyArgs.call(this, args), scope = ref[0], name = ref[1], setter = ref[2];
	    return Object.defineProperty(scope, name, {
	      configurable: true,
	      enumerable: true,
	      set: setter
	    });
	  };
	
	  return Mixin;
	
	})();
	
	module.exports = Mixin;


/***/ },
/* 2 */
/*!************************************************!*\
  !*** ./src/scripts/dependency-injector.coffee ***!
  \************************************************/
/***/ function(module, exports) {

	var Dependency, DependencyInjector;
	
	Dependency = (function() {
	  function Dependency(module1, description) {
	    this.module = module1;
	    this.description = description;
	  }
	
	  Dependency.prototype.toString = function() {
	    return ["`" + this.module + "`", this.description ? "(" + this.description + ")" : ''].filter(function(item) {
	      return item;
	    }).join(' ');
	  };
	
	  return Dependency;
	
	})();
	
	DependencyInjector = (function() {
	  var unresolved;
	
	  function DependencyInjector() {}
	
	  DependencyInjector.Dependency = Dependency;
	
	  unresolved = function(key, dependency) {
	    return function() {
	      throw new Error("[Unresolved dependency] - `" + key + "`: " + dependency);
	    };
	  };
	
	  DependencyInjector.dependencies = function(__dependencies) {
	    var dependencies;
	    this.__dependencies = __dependencies;
	    dependencies = this.__dependencies || {};
	    return Object.keys(dependencies).forEach((function(_this) {
	      return function(key) {
	        var dependency, descriptor;
	        dependency = dependencies[key];
	        if (!(dependency instanceof Dependency)) {
	          throw new Error("Dependency `" + key + "` should be an instance of `" + _this.name + ".Dependency`");
	        }
	        descriptor = unresolved(key, dependency);
	        return Object.defineProperty(_this.prototype, key, {
	          configurable: true,
	          enumerable: true,
	          get: descriptor,
	          set: descriptor
	        });
	      };
	    })(this));
	  };
	
	  DependencyInjector.registerDependencies = function(injectedDependencies) {
	    var dependencies;
	    dependencies = this.__dependencies || {};
	    if (!Object.keys(dependencies).length) {
	      return;
	    }
	    Object.keys(injectedDependencies).forEach((function(_this) {
	      return function(key) {
	        var chain, extraneous;
	        extraneous = false;
	        if (!(dependencies[key] instanceof Dependency)) {
	          extraneous = true;
	          if (!(key in dependencies) && (key in _this.prototype)) {
	            chain = _this.prototype;
	            while (!chain.hasOwnProperty(key)) {
	              chain = Object.getPrototypeOf(chain).constructor.prototype;
	            }
	            if (chain.constructor.__dependencies[key] instanceof Dependency) {
	              extraneous = false;
	            }
	          }
	        }
	        if (!extraneous) {
	          return dependencies[key] = injectedDependencies[key];
	        }
	      };
	    })(this));
	    Object.keys(dependencies).forEach((function(_this) {
	      return function(key) {
	        var dependency;
	        dependency = dependencies[key];
	        if (dependency instanceof Dependency) {
	          unresolved(key, dependency)();
	        }
	        Object.defineProperty(_this.prototype, key, {
	          configurable: true,
	          enumerable: true,
	          writable: true
	        });
	        return _this.prototype[key] = dependency;
	      };
	    })(this));
	    return this;
	  };
	
	  return DependencyInjector;
	
	})();
	
	module.exports = DependencyInjector;


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,