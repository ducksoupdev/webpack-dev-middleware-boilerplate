DependencyInjector = require '../scripts/dependency-injector'

describe 'DependencyInjector', ->
    context '.dependencies', ->
        it 'sets up the dependencies for a class', ->
            class DependencyTest extends DependencyInjector
                @dependencies {
                    config: new @Dependency 'config', 'environment config'
                }

            expect(DependencyTest.__dependencies.config instanceof DependencyTest.Dependency).to.be.ok
            expect(DependencyTest.__dependencies.config.module).to.equal('config')
            expect(DependencyTest.__dependencies.config.description).to.equal('environment config')

        it 'throws an error when accessing an unresolved dependency', ->
            class DependencyTest extends DependencyInjector
                @dependencies {
                    config: new @Dependency 'config', 'environment config'
                }

            dependencyTest = new DependencyTest()
            expect(-> dependencyTest.config).to.throw('[Unresolved dependency]')


        it 'throws an error when accessing an unresolved dependency even from an inherited parent', ->
            class ParentClass extends DependencyInjector
                @dependencies {
                    config: new @Dependency 'config', 'environment config'
                }

            class SubClass extends ParentClass

            subClass = new SubClass()
            expect(-> subClass.config).to.throw('[Unresolved dependency]')

    context '.registerDependencies', ->
        it 'finds the dependencies from the prototype chain, if no dependencies are defined in the subclass and resolves the dependency for the subclass', ->

            class ParentClass extends DependencyInjector
                @dependencies {
                    config: new @Dependency 'config', 'environment config'
                }

            class SubClass extends ParentClass

            SubClass.registerDependencies {
                config: 'Yolo!'
            }

            subClass = new SubClass()
            expect(subClass.config).to.equal('Yolo!')

            parentClass = new ParentClass()
            expect(-> parentClass.config).to.throw('[Unresolved dependency]')

        it 'silently ignores extraneous dependencies from the entire prototype chain', ->
            class ParentClass extends DependencyInjector
                @dependencies {
                    config: new @Dependency 'config', 'environment config'
                }

            class SubClass extends ParentClass
                @dependencies {
                    environment: new @Dependency 'app-env', 'app environment'
                }

            SubClass.registerDependencies {
                config: 'Yolo!'
                environment: 'development'
                extraneous: 'Blaaah'
            }

            subClass = new SubClass()
            expect(subClass.config).to.equal('Yolo!')
            expect(subClass.environment).to.equal('development')
            expect(subClass.extraneous).to.be.undefined

        it 'returns silently if there are no dependencies in the entire prototype chain', ->
            class DependencyTest extends DependencyInjector
                constructor: ->
                    @prop = 'Property'
            DependencyTest.registerDependencies({})
            dependencyTest = new DependencyTest()
            expect(dependencyTest.prop).to.equal('Property')

        it 'checks and safely registers the dependency if both subclass and the parent class have dependencies defined', ->
            class ParentClass extends DependencyInjector
                @dependencies {
                    config: new @Dependency 'config', 'environment config'
                }

            class SubClass extends ParentClass
                @dependencies {
                    environment: new @Dependency 'app-env', 'app environment'
                }

            SubClass.registerDependencies {
                config: 'Yolo!'
                environment: 'development'
            }

            subClass = new SubClass()
            expect(subClass.config).to.equal('Yolo!')
            expect(subClass.environment).to.equal('development')

        it 'returns the class itself to allow chaining', ->
            class ParentClass extends DependencyInjector
                @dependencies {
                    environment: new @Dependency 'Environment', 'Environment Name'
                }

                @staticMethod: -> return 'Static Method'

            expect(ParentClass.registerDependencies({environment: 'development'}).staticMethod).to.eql(ParentClass.staticMethod)
