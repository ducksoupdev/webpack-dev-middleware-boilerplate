MODULE_KEYWORDS = ['extended', 'included']

class Mixin
    propertyArgs = (args) ->
        scope = @prototype
        if args.length > 2
            [scope, name, descriptor] = args
        else
            [name, descriptor] = args
        return [scope, name, descriptor]

    @extend: (obj) ->
        for key, value of obj when key not in MODULE_KEYWORDS
            @[key] = value

        obj.extended?.apply this
        return this

    @include: (obj) ->
        mixin = if typeof obj is 'function' then obj.prototype else obj
        for key, value of mixin when key not in MODULE_KEYWORDS
            # Assign properties to the prototype
            @::[key] = value

        obj.included?.apply this
        return this

    @defineGetter: (args...) ->
        [scope, name, getter] = propertyArgs.call this, args
        Object.defineProperty(scope, name, {
            configurable: true,
            enumerable: true,
            get: getter
        })

    @defineSetter: (args...) ->
        [scope, name, setter] = propertyArgs.call this, args
        Object.defineProperty(scope, name, {
            configurable: true,
            enumerable: true,
            set: setter
        })

module.exports = Mixin