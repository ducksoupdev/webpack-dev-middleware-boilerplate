class Dependency
    constructor: (@module, @description) ->
    toString: -> return ["`#{@module}`", if @description then "(#{@description})" else ''].filter((item) -> item).join(' ')

class DependencyInjector
    @Dependency: Dependency

    unresolved = (key, dependency) ->
        return ->
            throw new Error "[Unresolved dependency] - `#{key}`: #{dependency}"

    @dependencies: (@__dependencies) ->
        dependencies = @__dependencies or {}
        Object.keys(dependencies).forEach (key) =>
            dependency = dependencies[key]
            unless dependency instanceof Dependency
                throw new Error "Dependency `#{key}` should be an instance of `#{@name}.Dependency`"
            descriptor = unresolved(key, dependency)
            Object.defineProperty(@prototype, key, {
                configurable: true
                enumerable: true
                get: descriptor
                set: descriptor
            })

    @registerDependencies: (injectedDependencies) ->
        dependencies = @__dependencies or {}
        return unless Object.keys(dependencies).length

        Object.keys(injectedDependencies).forEach (key) =>
            extraneous = false
            unless dependencies[key] instanceof Dependency
                extraneous = true
                # If the injected dependency is not a direct dependency check if it's an inherited dependency
                if not (key of dependencies) and (key of @prototype)
                    chain = @prototype
                    while not chain.hasOwnProperty key
                        chain = Object.getPrototypeOf(chain).constructor.prototype
                    # Find the parent which has the dependecy defined
                    if chain.constructor.__dependencies[key] instanceof Dependency
                        extraneous = false
            dependencies[key] = injectedDependencies[key] unless extraneous

        Object.keys(dependencies).forEach (key) =>
            dependency = dependencies[key]
            unresolved(key, dependency)() if dependency instanceof Dependency
            # Redefine the property to allow inherited classes to inject their own dependencies
            Object.defineProperty(@prototype, key, {
                configurable: true
                enumerable: true
                writable: true
            })
            @prototype[key] = dependency

        return this

module.exports = DependencyInjector