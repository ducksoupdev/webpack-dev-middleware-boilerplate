{
  "name": "mi9-route",
  "version": "2.0.0",
  "description": "Note: The words router / controller would be used interchangeably",
  "repository": {
    "type": "git",
    "url": "git+https://stash.9msn.net/scm/mod/mi9-route-server.git"
  },
  "main": "build/lib/module.js",
  "dependencies": {
    "lodash": "^2.4.1",
    "mi9-module-common": "git+https://stash.9msn.net/scm/mod/mi9-module-common.git#2.0.0"
  },
  "devDependencies": {
    "coffee-loader": "^0.7.2",
    "coffee-script": "^1.9.3",
    "coffeelint": "^1.10.1",
    "coffeelint-loader": "^0.1.1",
    "jade": "^1.11.0",
    "jade-loader": "^0.7.1",
    "mi9-externals-webpack": "git+https://stash.9msn.net/scm/mod/mi9-externals-webpack.git#2.0.0",
    "node-libs-browser": "^0.5.0",
    "sinon": "^1.15.4",
    "source-map-loader": "^0.1.5",
    "stats-webpack-plugin": "^0.2.1",
    "webpack": "^1.10.1"
  },
  "gitHead": "0a56fd2d58b9499b4ab8f2a3dbf13761ff4a9096",
  "readme": "## Route Class\n\nNote: The words router / controller would be used interchangeably\n\n\n##### Reference directory structure\n\n```\n|_project/\n  |_routes/\n    |_gallery.coffee\n    |_insta-celeb.coffee\n  |_router.coffee\n  |_app.coffee\n\n```\n\n###### Gallery Route - `gallery.coffee`\n\n##### Class based routes\n\n```coffee\n\nRoute = require 'mi9-route'\n\nclass Gallery extends Route\n    render: ->\n        @res.send '<h1>Welcome to the gallery</h1>'\n\nmodule.exports = Gallery\n\n```\n\nAll routes should implement the entry point render method. \nOptionally an init method could be used which would act just like a constructor\n\n```coffee\n\nRoute = require 'mi9-route'\n\nclass Home extends Route\n    init: ->\n        @settings = @res.locals.settings\n    viewModel: ->\n        return {view: @settings}\n    render: ->\n        @res.json @viewModel()\n\nmodule.exports = Home\n\n```\nThe routes are regular classes with extras. \nThe routes can be used inside another module using the `new MyRoute()` construct. \n\nUsing the class as `MyRoute.asRoute()` wraps your class as an express middleware. \n\nSo, you could simply use the class directly in your router / controller. \n\n```coffee\nrouter = require('express').Router()\nHome = require './routes/home'\n\nrouter.get '/', Home.asRoute()\n\nmodule.exports = router\n```\n\nThe `MyRoute.asRoute()` construct doesn't expect any arguments and hence the init method won't receive any params, but the req, res and next would be available as instance variables. However when using the `new MyRoute(arg)` construct you get the arguments passed to the init method as expected. The `render` method gets called only when an instance is a route. \n\n```coffee\nRoute = require 'mi9-route'\n\nclass Gallery extends Route\n    init: (id) ->\n        @id = if @isRoute() then req.params.id else id\n    viewModel: ->\n        data = @getData()\n        return {view: data}\n    render: ->\n        @res.json @viewModel()\n\nmodule.exports = Gallery\n\n```\n\nUsage inside another module\n\n```coffee\ngallery = new Gallery(id)\ngalleryModel = gallery.viewModel()\n\n```\n\nUsage as a route\n\n```coffee\napp.get '/gallery/:id', Gallery.asRoute()\n\n```\n\n## Template Helper Class\n\n### Rendering templates\n\nThe `mi9-route` modules comes inbuilt with the template helper module. \nExtending from the `Route` class adds all the template helpers into the subclass. \n\n```coffee\nRoute = require 'mi9-route'\n\nclass MyRoute extends Route\n    init: ->\n        @registerTemplates({\n            templateOne: {\n                path: __dirname + '/mytemplate1'\n                baseDir: __dirname\n            }\n        })\n    viewModel: ->\n        model = {\n            view: renderTemplate('templateOne', {content: '<html/>'})\n        }\n    render: ->\n        @res.render 'page', @viewModel()\n```\n\nThe template helpers can also available to be used independently\n\n```coffee\n{TemplateHelper} = require 'mi9-route'\n\ntemplate = new TemplateHelper()\n\ntemplate.registerTemplates({\n    templateOne: {\n        path: __dirname + '/mytemplate1'\n        baseDir: __dirname\n    }\n    templateTwo: {\n        path: __dirname + '/mytemplate2'\n        baseDir: __dirname\n    }\n})\n\n# Render the template\none = template.renderTemplate('templateOne', {view: '<html/>'})\ntwo = template.renderTemplate('templateTwo', {view: '<html/>'})\n\n```\n\n### Rendering partials\n\n```coffee\ntemplate = new TemplateHelper()\n\ntemplate.registerPartials({\n    partialOne: {\n        path: __dirname + '/path/file1.jade'\n        baseDir: __dirname\n    }\n    partialTwo: {\n        path: __dirname + '/path/file2.jade'\n        baseDir: __dirname\n    }\n})\n\n# Render the template\none = template.renderPartial('partialOne', {view: '<html/>'})\ntwo = template.renderPartial('partialTwo', {view: '<html/>'})\n\n```\n\n##### Jade usage\nRegister the partial as above and use inside a template\n\n`file: main.jade`\n```jade\nbody\n    != includePartial('partialOne', {from: 'Master'})\n```\n\n`file: partials/partial.jade`\n```jade\n<div>#{from} says: I am a partial</div>\n```\n\n```coffee\ntemplate = new TemplateHelper()\n\ntemplate.registerTemplates({\n    templateOne: {\n        path: __dirname + '/main.jade'\n        baseDir: __dirname\n    }\n})\n\ntemplate.registerPartials({\n    partialOne: {\n        path: __dirname + '/partials/partial.jade'\n        baseDir: __dirname\n    }\n})\n\nhtml = template.renderTemplate('templateOne', {view: '<html/>'})\n```\n\n## Shortcuts - Helper functions\n\n### templateConfig - create a template configuration object\n\n```coffee\n{shortcuts} = require 'mi9-route'\n\nconfig = shortcuts.templateConfig('abc', '/root')\n# returns the config as below\n# {\n#     path: '/root/abc.jade'\n#     baseDir: '/root'\n# }\n\n```\n\nCreate the templates configuration object using the config helper\n\n`file: templates.coffee`\n\n```coffee\n{shortcuts} = require 'mi9-route'\nbaseDir = __dirname + '/markups'\n\nmodule.exports =\n    partials:\n        'partial': shortcuts.templateConfig('partials/partial', baseDir)\n    templates:\n        'template': shortcuts.templateConfig('template', baseDir)\n\n### exports looks like\n{\n    partials: {\n        partial: {\n            path: '/somedir/markups/partials/partial.jade'\n            baseDir: '/somedir/markups'\n        }\n    }\n\n    templates: {\n        template: {\n            path: '/somedir/markups/template.jade'\n            baseDir: '/somedir/markups'\n        }\n    }\n}\n###\n```\n\nAnd use inside the route subclass\n`file: my-route.coffee`\n\n```coffee\nRoute  = require 'mi9-route'\ntemplates = require './templates'\n\nclass MyRoute extends Route\n    init: ->\n        @registerPartials(templates.partials)\n        @registerTemplates(templates.templates)\n\n    render: ->\n        html = @renderPartial('partial', {})\n        html += @renderTemplate('template', {})\n        @res.send html\n```\n\nCreate an extended configuration object\n\n`file: templates.coffee`\n```coffee\n{shortcuts} = require 'mi9-route'\nbaseDir = __dirname + '/markups'\n\nmodule.exports =\n    templates:\n        'template': shortcuts.templateConfig('new-template', baseDir, {extended: true})\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "mi9-route@2.0.0",
  "_shasum": "4d5ac0a96685780ef57260a3dcd36ba53973ba18",
  "_from": "git+https://stash.9msn.net/scm/mod/mi9-route-server.git#2.0.0",
  "_resolved": "git+https://stash.9msn.net/scm/mod/mi9-route-server.git#0a56fd2d58b9499b4ab8f2a3dbf13761ff4a9096"
}
