module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./utils */ 1);


/***/ },
/* 1 */
/*!**********************************!*\
  !*** ./src/scripts/utils.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var Breakpoints, DATE_ERROR, _, absoluteUrl, moment, stripBasePath, tz, unitize, url, uuid;
	
	_ = __webpack_require__(/*! lodash */ 2);
	
	moment = __webpack_require__(/*! moment */ 3);
	
	tz = __webpack_require__(/*! moment-timezone */ 4);
	
	uuid = __webpack_require__(/*! node-uuid */ 5);
	
	unitize = __webpack_require__(/*! unitize */ 6);
	
	url = __webpack_require__(/*! url */ 7);
	
	Breakpoints = __webpack_require__(/*! mi9-breakpoints-common */ 8);
	
	DATE_ERROR = 'Invalid Date';
	
	stripBasePath = function(path, base) {
	  if (typeof path === 'string') {
	    path = path.replace(base.replace(/\/*$/, '/'), '');
	  }
	  return path;
	};
	
	absoluteUrl = function(path, domain) {
	  path = path.replace(/^\/*/, '');
	  domain = domain.replace(/\/*$/, '');
	  if (!domain.match(/^http(s?):\/\//)) {
	    domain = "//" + domain;
	  }
	  return domain + "/" + path;
	};
	
	module.exports = {
	  uuid: function() {
	    return uuid.v4();
	  },
	  limit: function(items, limit) {
	    if (items != null) {
	      return items.slice(0, limit);
	    }
	  },
	  timeAgo: function(timestamp) {
	    var datetime, daysDiff, time;
	    datetime = new Date(timestamp);
	    if (datetime === DATE_ERROR) {
	      return '';
	    }
	    time = moment(datetime);
	    daysDiff = moment().diff(time, 'days');
	    if (daysDiff < 14) {
	      return time.fromNow();
	    } else {
	      return time.format('MMM Do, YYYY');
	    }
	  },
	  ticksAgo: function(ticks, format, relativeTime) {
	    var daysDiff, time;
	    if (format == null) {
	      format = 'MMM Do, YYYY';
	    }
	    if (relativeTime == null) {
	      relativeTime = null;
	    }
	    if (relativeTime) {
	      moment.local('en', {
	        relativeTime: relativeTime
	      });
	    }
	    time = moment(new Date(ticks));
	    daysDiff = moment().diff(time, 'days');
	    if (daysDiff < 14) {
	      return time.fromNow();
	    } else {
	      return time.format(format);
	    }
	  },
	  currentDate: function(format) {
	    var now;
	    now = tz(moment());
	    return now.tz('Australia/Sydney').format(format);
	  },
	  formatDate: function(date, format) {
	    var datetime;
	    datetime = new Date(date);
	    if (datetime === DATE_ERROR) {
	      return '';
	    }
	    return moment(datetime).format(format);
	  },
	  domain: function(urlStr) {
	    var domainExpr;
	    domainExpr = /^((?:https?\:\/\/)?(?:[a-z0-9-_]+\.)*[a-z0-9-_]+\.?(?::([0-9]+))?)/i;
	    if (domainExpr.test(urlStr)) {
	      return (urlStr.match(domainExpr))[1];
	    }
	  },
	  resizeImage: function(width, src) {
	    return "http://images.ninemsn.com.au/resizer.aspx?width=" + (width.toString()) + "&url=" + (encodeURI(src));
	  },
	  add: function(value, addition) {
	    return value + addition;
	  },
	  lowerCase: function(text) {
	    if (typeof text === 'string') {
	      return text.toLowerCase();
	    }
	  },
	  contentUrlBuilder: function(arg) {
	    var base, domain, url;
	    url = arg.url, domain = arg.domain, base = arg.base;
	    if (base) {
	      url = stripBasePath(url, base);
	    }
	    if (domain) {
	      url = absoluteUrl(url, domain);
	    }
	    return url;
	  },
	  toAbsoluteUrl: absoluteUrl,
	  nomarkup: function(html) {
	    return html != null ? html.replace(/<.+?>/g, '') : void 0;
	  },
	  pageTitle: function(title, defaultTitle, titleDecoration) {
	    if (title) {
	      return (exports.nomarkup(title)) + " " + titleDecoration;
	    } else {
	      return defaultTitle;
	    }
	  },
	  aspectRatio: function(height, width) {
	    return (height / width) * 100;
	  },
	  imageAspect: function(width, height) {
	    var aspect;
	    return aspect = width / height;
	  },
	  utcToLocalTimezone: function(utc) {
	    var datetime;
	    datetime = new Date(utc);
	    if (datetime === DATE_ERROR) {
	      return '';
	    }
	    return moment(datetime).tz(env.get('meta:timezone')).format();
	  },
	  unitize: function(num) {
	    return unitize(num).precision(1).toString().replace(/\ /g, '');
	  },
	  breakpoint: function(size, type) {
	    var breakpoints, ref;
	    breakpoints = new Breakpoints();
	    return (ref = breakpoints[size]) != null ? ref[type] : void 0;
	  },
	  showVideoBlock: function(content) {
	    var heroIsVideo, isArticle, ref, ref1, ref2;
	    isArticle = (content != null ? (ref = content.templateName) != null ? ref.toLowerCase() : void 0 : void 0) === 'article';
	    heroIsVideo = (content != null ? (ref1 = content.media) != null ? (ref2 = ref1[0]) != null ? ref2.type : void 0 : void 0 : void 0) === 'video';
	    return isArticle && heroIsVideo;
	  }
	};


/***/ },
/* 2 */
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 3 */
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/***/ function(module, exports) {

	module.exports = require("moment");

/***/ },
/* 4 */
/*!**********************************!*\
  !*** external "moment-timezone" ***!
  \**********************************/
/***/ function(module, exports) {

	module.exports = require("moment-timezone");

/***/ },
/* 5 */
/*!****************************!*\
  !*** external "node-uuid" ***!
  \****************************/
/***/ function(module, exports) {

	module.exports = require("node-uuid");

/***/ },
/* 6 */
/*!**************************!*\
  !*** external "unitize" ***!
  \**************************/
/***/ function(module, exports) {

	module.exports = require("unitize");

/***/ },
/* 7 */
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ function(module, exports) {

	module.exports = require("url");

/***/ },
/* 8 */
/*!*****************************************!*\
  !*** external "mi9-breakpoints-common" ***!
  \*****************************************/
/***/ function(module, exports) {

	module.exports = require("mi9-breakpoints-common");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,