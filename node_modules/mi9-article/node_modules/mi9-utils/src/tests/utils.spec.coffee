environment = environmentInit require 'mi9-environment'
utils = require '../scripts/utils'
proxyquire = require('proxyquire').noCallThru().noPreserveCache()

describe 'utils', ->
    utilsProxy = null
    env = null

    beforeEach ->

        envStub = sinon.stub()
        envStub.withArgs('sitecore:contentBasePath').returns('/network/the-fix-path')
        envStub.withArgs('meta:timezone').returns('Australia/Sydney')

        env =
            get: envStub

        utilsProxy = proxyquire('../scripts/utils',
            {
                'mi9-environment': env,
            })

    it 'should format a sitecore path to an article url', ->
        url = utilsProxy.contentUrlBuilder('/network/the-fix-path/2014/09/23/09/07/curtis-stone-baby')
        expect(url).to.equal ('/2014/09/23/09/07/curtis-stone-baby')

    describe 'pageTitle', ->
        it 'should return default title if no title specified', ->
            expect(utilsProxy.pageTitle null, 'Default Title').to.equal 'Default Title'

        it 'should return title with decoration', ->
            expect(utilsProxy.pageTitle 'Title', 'Default Title', '| Test').to.equal 'Title | Test'


    describe 'nomarkup', ->
        it 'should strip markup', ->
            text = utilsProxy.nomarkup 'This is <strong>bold</strong>. This is <i>italic</i>!'
            expect(text).to.equal 'This is bold. This is italic!'

        it 'should strip markup with attributes', ->
            text = utilsProxy.nomarkup 'This is a <div class="dinobots">Dinobot!</div>'
            expect(text).to.equal 'This is a Dinobot!'

        it 'should strip markup with javascript', ->
            text = utilsProxy.nomarkup 'This is a <button onclick="a ? b.c(d) : e + f * g % h / i">Button!</div>'
            expect(text).to.equal 'This is a Button!'

    describe 'utcToLocalTimezone', ->
        it 'should correct format utc timestamp', ->
            expect(utilsProxy.utcToLocalTimezone '2015-01-02T12:34:56Z').to.equal '2015-01-02T23:34:56+11:00'

    describe 'limit', ->
        it 'should limit an array to the specified length', ->
            arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
            result = utils.limit arr, 5
            expect(result).to.have.length 5

        it 'should return all items when limit is greater than array length', ->
            arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
            result = utils.limit arr, 15
            expect(result).to.have.length 10

    describe 'domain', ->

        it 'should return the host part of a url', ->
            actual = utils.domain 'http://9news.com.au/this/is?irrelevant'
            expect(actual).to.equal 'http://9news.com.au'

        it 'should include port numbers', ->
            actual = utils.domain 'http://9news.com.au:8080?irrelevant'
            expect(actual).to.equal 'http://9news.com.au:8080'

        it 'should ignore query strings', ->
            actual = utils.domain 'http://9news.com.au?irrelevant'
            expect(actual).to.equal 'http://9news.com.au'

        it 'should fail when the url is relative', ->
            actual = utils.domain '/some/path?irrelevant'
            expect(actual).to.fail

        it 'should fail when the url is invalid', ->
            actual = utils.domain 'not a url'
            expect(actual).to.fail
