module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./breakpoints */ 1);


/***/ },
/* 1 */
/*!****************************************!*\
  !*** ./src/scripts/breakpoints.coffee ***!
  \****************************************/
/***/ function(module, exports) {

	var Breakpoints;
	
	Breakpoints = (function() {
	  function Breakpoints() {}
	
	  Breakpoints.prototype.xs = {
	    min: 0,
	    max: 479
	  };
	
	  Breakpoints.prototype.sm = {
	    min: 480,
	    max: 767
	  };
	
	  Breakpoints.prototype.md = {
	    min: 768,
	    max: 1023
	  };
	
	  Breakpoints.prototype.lg = {
	    min: 1024,
	    max: 1279
	  };
	
	  Breakpoints.prototype.xl = {
	    min: 1280,
	    max: 1679
	  };
	
	  Breakpoints.prototype.xxl = {
	    min: 1680
	  };
	
	  return Breakpoints;
	
	})();
	
	module.exports = Breakpoints;


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbm9kZV9tb2R1bGVzL21pOS1icmVha3BvaW50cy1jb21tb24vd2VicGFjay9ib290c3RyYXAgYTMyYzU3NGYyMmI5NTQ3NDA0MDYiLCJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy9taTktYnJlYWtwb2ludHMtY29tbW9uLy4vc3JjL3NjcmlwdHMvaW5kZXguY29mZmVlIiwid2VicGFjazovLy9ub2RlX21vZHVsZXMvbWk5LWJyZWFrcG9pbnRzLWNvbW1vbi8uL3NyYy9zY3JpcHRzL2JyZWFrcG9pbnRzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7QUNyQ0EsT0FBTSxDQUFDLE9BQVAsR0FBaUIsb0JBQVEsc0JBQVI7Ozs7Ozs7Ozs7QUNEakI7O0FBQU07Ozt5QkFDRixLQUNJO0tBQUEsS0FBSyxDQUFMO0tBQ0EsS0FBSyxHQURMOzs7eUJBRUosS0FDSTtLQUFBLEtBQUssR0FBTDtLQUNBLEtBQUssR0FETDs7O3lCQUVKLEtBQ0k7S0FBQSxLQUFLLEdBQUw7S0FDQSxLQUFLLElBREw7Ozt5QkFFSixLQUNJO0tBQUEsS0FBSyxJQUFMO0tBQ0EsS0FBSyxJQURMOzs7eUJBRUosS0FDSTtLQUFBLEtBQUssSUFBTDtLQUNBLEtBQUssSUFETDs7O3lCQUVKLE1BQ0k7S0FBQSxLQUFLLElBQUw7Ozs7Ozs7QUFFUixPQUFNLENBQUMsT0FBUCxHQUFpQiIsImZpbGUiOiJsaWIvc2VydmVyL21vZHVsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgYTMyYzU3NGYyMmI5NTQ3NDA0MDZcbiAqKi8iLCIjIFRPRE86IENvbnZlcnQgdGhpcyBtb2R1bGUgaW50byBzaXRlIGNvbmZpZ1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlICcuL2JyZWFrcG9pbnRzJ1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9jb2ZmZWVsaW50LWxvYWRlciEuL3NyYy9zY3JpcHRzL2luZGV4LmNvZmZlZVxuICoqLyIsImNsYXNzIEJyZWFrcG9pbnRzXG4gICAgeHM6XG4gICAgICAgIG1pbjogMFxuICAgICAgICBtYXg6IDQ3OVxuICAgIHNtOlxuICAgICAgICBtaW46IDQ4MFxuICAgICAgICBtYXg6IDc2N1xuICAgIG1kOlxuICAgICAgICBtaW46IDc2OFxuICAgICAgICBtYXg6IDEwMjNcbiAgICBsZzpcbiAgICAgICAgbWluOiAxMDI0XG4gICAgICAgIG1heDogMTI3OVxuICAgIHhsOlxuICAgICAgICBtaW46IDEyODBcbiAgICAgICAgbWF4OiAxNjc5XG4gICAgeHhsOlxuICAgICAgICBtaW46IDE2ODBcblxubW9kdWxlLmV4cG9ydHMgPSBCcmVha3BvaW50c1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2NvZmZlZWxpbnQtbG9hZGVyIS4vc3JjL3NjcmlwdHMvYnJlYWtwb2ludHMuY29mZmVlXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==