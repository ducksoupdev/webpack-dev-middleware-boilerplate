{expect} = require 'chai'

env = require '../scripts/environment'
defaultConfig = require './fixtures/env/default'
devConfig = require './fixtures/env/development'


describe 'calling functions without calling setUp', ->
    it 'should throw and error if get is called without setting up', ->
        fn = env.get
        expect(fn).to.throw Error

    it 'should throw and error if getAllConfig is called without setting up', ->
        fn = env.getAllConfig
        expect(fn).to.throw Error


describe 'setting up the environment with a defaultConfig and an empty object', ->
    beforeEach ->
        env.setup(defaultConfig, {})

    describe 'getAllConfig()', ->

        it 'should have a config equal to defaultConfig', ->
            expect(env.getAllConfig()).to.eql defaultConfig

        it 'should return a new instance', ->
            expect(env.getAllConfig() is defaultConfig).to.be.false

    describe 'get(key)', ->
        it 'should have a get function which retrieves a config variable based on a key', ->
            expect(env.get('meta.sitename')).to.eql defaultConfig.meta.sitename


describe 'setting up the environment with a default config and an environment config', ->
    beforeEach ->
        env.setup(defaultConfig, devConfig)

    describe 'getAllConfig()', ->

        it 'should have a config that is not equal to defaultConfig', ->
            expect(env.getAllConfig()).to.not.eql defaultConfig

        it 'should have a config that is not equal to devConfig', ->
            expect(env.getAllConfig()).to.not.eql devConfig

    describe 'get(key)', ->
        it 'should have a server.publicHost from the development config', ->
            expect(env.get('server.publicHost')).to.eql devConfig.server.publicHost

        it 'should still have the meta config from default.coffee', ->
            expect(env.get('meta.sitename')).to.eql defaultConfig.meta.sitename

describe 'calling keys which do not exist', ->
    beforeEach ->
        env.setup(defaultConfig, devConfig)

    it 'should return undefined when key does not exist', ->
        expect(env.get('batman')).to.eql undefined

    it 'should return undefined when deep key does not exist', ->
        expect(env.get('na.na.na.na.na.na.na.batman')).to.eql undefined

describe 'getAppEnvironment()', ->
    describe 'process.env.APP_ENV not set', ->

        it 'should return the local app environment (development)', ->
            expect(env.getAppEnvironment()).to.eql 'development'

    describe 'process.env.APP_ENV is set', ->
        before ->
            process.env.APP_ENV = 'TEST'

        it 'should return test environment', ->
            expect(env.getAppEnvironment()).to.eql 'TEST'