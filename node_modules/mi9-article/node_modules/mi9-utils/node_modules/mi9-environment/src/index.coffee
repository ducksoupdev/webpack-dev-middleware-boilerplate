# environment.coffee
_ = require 'lodash'

LOCAL_APP_ENVIRONMENT = 'development'
DEFAULT_APP_ENVIRONMENT = 'default'

instance = null
appInstEnv = null

getEnvConfig = (appConfigPath, appConfigExtn, appEnv) ->
    config = "#{appConfigPath}/#{appEnv}"
    config = if appConfigExtn then "#{config}.#{appConfigExtn}" else config

    try
        instance = require config
    catch error
        if appEnv is LOCAL_APP_ENVIRONMENT
            instance = {}
        else
            throw new Error "Invalid environment name '#{appEnv}'"

    instance

getDefaultConfig = (appConfigPath, appConfigExtn)->

    defaultConfig = "#{appConfigPath}/#{DEFAULT_APP_ENVIRONMENT}"
    defaultConfig = if appConfigExtn then "#{defaultConfig}.#{appConfigExtn}" else defaultConfig
    try
        require defaultConfig
    catch error
        throw new Error "Default configuration does not exist."

getCopy = (val) ->
    if typeof val is 'object' then _.cloneDeep val else val

exports.serializeKey = serializeKey = (key) ->
    key.replace /:/g, '_'

exports.loadAppConfig = loadAppConfig = ({appConfigPath, appConfigExtn, appEnv}) ->

    instance = getEnvConfig(appConfigPath, appConfigExtn, appEnv)
    defaultInstance = getDefaultConfig(appConfigPath, appConfigExtn)

    instance = _.merge defaultInstance, instance
    appInstEnv = appEnv

exports.setup = setup = ({appConfigPath, appConfigExtn}) ->
    unless instance
        if appConfigPath
            appEnv = process.env.APP_ENV ? LOCAL_APP_ENVIRONMENT
            loadAppConfig {appConfigPath, appConfigExtn, appEnv}
    return this

exports.reset = reset = ->
    instance = null
    appInstEnv = null

# This is to be used only in test cases!
exports.override = (configString, value) ->
    instance ?= {}

    val = instance
    objSeq = (configString and configString.split(':')) or []

    if objSeq.length
        for key in objSeq[..-2]
            val = val[key] ?= {}
        last = objSeq[-1..]
        val[last] = value

exports.appEnv = appEnv = ->
    return appInstEnv

exports.get = get = (queryString) ->
    unless instance
        if process.env.APP_CONFIG_PATH
            setup { appConfigPath: process.env.APP_CONFIG_PATH, appConfigExtn: process.env.APP_CONFIG_EXT }
        else
            throw new Error "Environment not set!"

    return instance unless queryString

    # It's possible to override keys using (bash) environment variables,
    # only colons (:) are replaced with a underscore.
    # e.g. instance['server:url'] == process.env['server_url']
    # If there's a match, return early. env vars take priority.
    envVarKey = serializeKey(queryString)
    if process.env[envVarKey]
        return process.env[envVarKey]

    objSeq = queryString.split(':')

    val = instance
    for key in objSeq
        if typeof val[key] isnt 'undefined' then val = val[key] else return
    return getCopy val

exports.sys = sys = (key) ->
    return unless process.env[key]?
    value = process.env[key]
    try value = JSON.parse process.env[key]
    return value
