{
  "name": "mi9-environment",
  "version": "2.0.0",
  "description": "`file: myApp/mainApp.coffee`",
  "repository": {
    "type": "git",
    "url": "git+https://stash.9msn.net/scm/mod/mi9-environment-server.git"
  },
  "main": "build/lib/module.js",
  "dependencies": {
    "lodash": "^2.4.1",
    "lodash-deep": "^1.6.0"
  },
  "devDependencies": {
    "chai": "^3.2.0",
    "coffee-loader": "^0.7.2",
    "coffee-script": "^1.9.3",
    "coffeelint": "^1.10.1",
    "coffeelint-loader": "^0.1.1",
    "mi9-externals-webpack": "git+https://stash.9msn.net/scm/mod/mi9-externals-webpack.git#2.0.0",
    "node-libs-browser": "^0.5.0",
    "rewire": "^2.3.4",
    "source-map-loader": "^0.1.5",
    "stats-webpack-plugin": "^0.2.1",
    "webpack": "^1.10.1"
  },
  "gitHead": "9b495b57a07a65c8c9a4b2258819fd293b8e0ade",
  "readme": "### Using the environment module\n`file: myApp/mainApp.coffee`\n\n```coffee\n# step 1 - Setup the environment\nenvironment = require 'mi9-environment'\n    .setup\n        appConfigPath: \"#{__dirname}/env\"\n\n# step 2 - Load other dependencies\nsitecoreClient = require 'mi9-sitecoreclient'\n```\n\nYour app setup may look something like this\n\n```\nmyApp/\n    env/\n        default.coffee\n        development.coffee\n        staging.coffee\n        production.coffee\n    node_modules/\n        mi9-environment\n        mi9-sitecore\n    mainApp.coffee\n```\n\n###### setup method options\n`environment.setup(options)`\n\n* options.appConfigPath\n    > Absolute path to the app environment configuration directory\n    >\n    > The path may contain development/production/staging .js|.coffee|.json configuration files\n    > The corresponding config would be loaded based on the system `APP_ENV` variable\n    > usage: `appConfigPath: \"#{__dirname}/conf/path\"`\n\n* options.appConfigExtn\n    > Optional setting - By default the config is assumed to be a .js or .coffee script file\n    >\n    > This option can be used to use a `.json` extension instead\n    > usage: `appConfigExtn: 'json'`\n\nThe environment setup looks for the `APP_ENV` variable or else fallsback to a local environment\n> 1. APP_ENV (system environment variable)\n> 2. LOCAL_APP_ENVIRONMENT - `development`\n\n### Application specific configurations\n###### Environment specific app config files\n- myApp/env/development.coffee\n- myApp/env/production.coffee\n- myApp/env/staging.coffee\n- myApp/env/default.coffee\n\n`file: myApp/env/default.coffee`\n\n```coffee\nmodule.exports =\n    config:\n        sitename: 'thefix'\n```\n\n`file: myApp/env/development.coffee`\n\n```coffee\nmodule.exports =\n    config:\n        server: 'http://content.api.uat.ninemsn.com.au'\n```\n\n`file: myApp/env/production.coffee`\n\n```coffee\nmodule.exports =\n    config:\n        server: 'http://content.api.ninemsn.com.au'\n```\ndefault.coffee contains base config. Most config exists within here. [envName].coffee contains overrides for that environment.  \n**Note: If the value in [envName].coffee is undefined, it will not override default.coffee**\n### Specs\n- it 'throws error if `default` does not exist'\n- it 'returns the value from default if no environment specified and development.coffee is missing'\n- it 'throws error if the system environment `APP_ENV` could not be resolved as a valid configuration and `APP_ENV` is not `development`'\n- it 'returns the value from default if [envName].coffee does not overwrite'\n- it 'return the value from [envName].coffee if [envName].coffee overwrites default.coffee'\n### Accessing environment settings\n###### Accessor (Preferred way)\n```coffee\nninemsnServer = environment.get 'config:server'\n```\n\n###### Local copy\n```coffee\nappConfig = environment.get()\nninemsnServer= appConfig.config.server\n```\n\n### Controlling the application environment setting using the `APP_ENV` environment variable\n\n> ###### Volatile `APP_ENV`\n> - `APP_ENV=production coffee mainApp.coffee`\n>\n> This causes the setup to load the `myApp/env/production.(coffee|js|json)` configuration\n\n> ###### Persistent `APP_ENV`\n> Setting a user-wide `APP_ENV` environment variable in the server avoids the need for any additional execution arguments\n>\n> Unix - inside startup scripts like .bashrc / .profile\n> ```shell\n> export APP_ENV=\"production\"\n> ```\n>\n> Windows power shell\n> ```\n> [Environment]::SetEnvironmentVariable(\"APP_ENV\",\"production\",\"User\")\n> ```\n\n### Overriding particular settings just locally\nIf you want to take the default configuration (that is, config set be `APP_ENV`) but override only a particular key/value pair, \nyou can set that as an environment variable. The variable name should be the key used to access that config, with colons replaced\nwith underscores.\n\nFor example, if have something like the following\n\n```coffee\nconfig = http.get(environment.get('server:configUrl'))\n```\n\nYou would override that locally by setting the environment variable `server_configUrl`:\n\n```\nexport server_configUrl\n```\n\n### Accessing system environment variables\nNode stores environment variables values as `string`. This often leads to issues in truthiness checks\neg. \n\n```coffee\nprocess.env['NEW_RELIC_ENABLED'] = false\n\n```\nwould return `false` as string `'false'` causing a check like \n\n```coffee\nif process.env['NEW_RELIC_ENABLED']\n   # always true, unless the system variable NEW_RELIC_ENABLED itself is not declared\n\n```\n\nUse `environment.sys` instead and to make it work as expected \n```coffee\nconsole.log 'New relic enabled' if environment.sys 'NEW_RELIC_ENABLED'\n```\n`environment.sys` would parse number, json or boolean values into javascript types.\n\nThe raw values are always accessible through process.env\n",
  "readmeFilename": "README.md",
  "_id": "mi9-environment@2.0.0",
  "_shasum": "8c37090faf3264215bb3a989c40c6e668ea447eb",
  "_from": "git+https://stash.9msn.net/scm/mod/mi9-environment-server.git#2.0.0",
  "_resolved": "git+https://stash.9msn.net/scm/mod/mi9-environment-server.git#9b495b57a07a65c8c9a4b2258819fd293b8e0ade"
}
