q = require 'q'
sinon = require 'sinon'
Share = require '../scripts/share'

describe 'social sharing', ->
    this.timeout 1000
    mockRequestCache = sinon.stub().returns(q({
        data: ['total_count': 10]
        state: 'fulfilled'
        count: 120
        value: 420
    }))

    mockRequestCacheConfig = {}
    url = 'http://www.google.com'
    share = null

    beforeEach ->
        share = new Share mockRequestCache, mockRequestCacheConfig

    it 'should create an object with http set as a function', ->
        expect(share.http).to.be.a 'function'

    it 'should throw an error is request cache and config is not passed', ->
        fn = ->
            newShare = new Share()
        expect(fn).to.throw Error

    it 'should resolve the promise with an object', (done) ->
        share.get url
            .done (data) ->
                expect(typeof data.total).to.equal 'number'
                done()

    it 'should get FB shares', (done) ->
        share.facebook url
            .done (data) ->
                expect(typeof data).to.equal 'number'
                done()

    it 'should get twitter shares', (done) ->
        share.twitter url
            .done (data) ->
                expect(typeof data).to.equal 'number'
                done()

    it 'should get linkedin shares', (done) ->
        share.linkedin url
            .done (data) ->
                expect(typeof data).to.equal 'number'
                done()
