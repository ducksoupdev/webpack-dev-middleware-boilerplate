q = require 'q'
sinon = require 'sinon'
Gigya = require '../scripts/gigya'

describe 'Gigya', ->
    mockItem =
        url: 'http://google.com'
        title: 'mock Item'
        image: 'image.jpg'
    mockContentRespositoryInstance =
        getContent: ->
            q {
                link: 'http://google.com',
                headline: 'mock Item',
                media: ['image.jpg']
            }
    mockRequestCache = sinon.stub().returns(q({data: {mostShared: {topShares: mockItem}}}))

    mockGigyaConfig =
        httpConfig: {}
        url: 'http://google.com'
        isTest: false

    gigya = null


    mockOg = (fake, callback) ->
        callback null, mockItem

    describe 'constructor', ->
        before ->
            gigya = new Gigya mockContentRespositoryInstance, mockGigyaConfig, mockRequestCache

        it 'should create an instance of Gigya', ->
            expect(gigya).to.be.instanceof Gigya

        it 'should create an instance of Gigya with contentRepositoryInstance set', ->
            expect(gigya.contentRepositoryInstance).to.be.eql mockContentRespositoryInstance

        it 'should create an instance of Gigya with getItemData set', ->
            expect(gigya.getItemData).to.be.a 'function'

        it 'should create an instance of Gigya with http set', ->
            expect(gigya.http).to.be.a 'function'

        it 'should throw an error is gigya config does not have httpConfig', ->
            newMockGigyaConfig =
                url: 'http://google.com'
                isTest: false
            fn = ->
                new Gigya contentRepositoryInstance, newMockGigyaConfig, mockRequestCache
            expect(fn).to.throw Error

        it 'should throw an error is gigya config does not have url', ->
            newMockGigyaConfig =
                httpConfig: {}
                isTest: false
            fn = ->
                new Gigya contentRepositoryInstance, newMockGigyaConfig, mockRequestCache
            expect(fn).to.throw Error

        it 'should throw an error is gigya contentRepositoryInstance is not passed', ->
            fn = ->
                new Gigya null, mockGigyaConfig, mockRequestCache
            expect(fn).to.throw Error

        it 'should throw an error is gigya mockRequestCache is not passed', ->
            fn = ->
                new Gigya contentRepositoryInstance, mockGigyaConfig, null
            expect(fn).to.throw Error

    describe 'webScraper', ->
        before ->
            gigya = new Gigya mockContentRespositoryInstance, mockGigyaConfig, mockRequestCache

        it 'should return a promise with data', (done) ->
            gigya.og = mockOg
            scrape = gigya.webScraper mockItem

            scrape.done (data) ->
                expect(data.headline).to.be.eql mockItem.title
                expect(data.image).to.be.eql mockItem.image
                expect(data.link).to.be.eql mockItem.url
                done()

        it 'should return a promise with error', (done) ->
            errMockOg = (fake, callback) ->
                callback {err: 'Mock Error'}, null
            gigya.og = errMockOg
            scrape = gigya.webScraper mockItem

            scrape.catch (e) ->
                expect(e.err).to.be.eql 'Mock Error'
                done()
            .done()

    describe 'getContent', ->
        before ->
            gigya = new Gigya mockContentRespositoryInstance, mockGigyaConfig, mockRequestCache

        it 'should return a promise with data', (done) ->
            content = gigya.getContent mockItem
            content.done (data) ->
                expect(data.headline).to.be.eql mockItem.title
                expect(data.image).to.be.eql mockItem.image
                expect(data.link).to.be.eql mockItem.url
                done()

        it 'should return a promise with error', (done) ->
            gigya.contentRepositoryInstance.getContent = -> q.reject {}
            content = gigya.getContent mockItem

            content.done (data) ->
                expect(data).to.be.eql {}
                done()

    describe 'getTopShared', ->
        before ->
            gigya = new Gigya mockContentRespositoryInstance, mockGigyaConfig, mockRequestCache

        it 'should return a promise with data', (done) ->
            gigya.getTopShared().then (data) ->
                expect(data.items).to.be.ok
                done()




