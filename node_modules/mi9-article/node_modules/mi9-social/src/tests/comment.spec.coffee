q = require 'q'
sinon = require 'sinon'
Comment = require '../scripts/comment'

describe 'Comment', ->
    comment = null
    mockUrl = 'http://www.mock.com/mock/?id=12314'
    mockRequestCache = sinon.stub().returns(q({commentCount: 10}))

    describe 'constructor', ->
        it 'should create an object with http set', ->
            comment = new Comment mockRequestCache
            expect(comment.http).to.be.a 'function'

        it 'should throw an error if RequestCache is not passed', ->
            fn = ->
                new Comment()
            expect(fn).to.throw Error

    describe 'getGigyaParams', ->
        beforeEach ->
            comment = new Comment mockRequestCache

        it 'should return an object with valid, categoryId and streamId keys', ->
            params = comment.getGigyaParams mockUrl
            expect(params.valid).to.be.eql true
            expect(params.categoryId).to.be.eql 'www'
            expect(params.streamId).to.be.eql 'article_12314'

    describe 'getCount', ->
        beforeEach ->
            comment = new Comment mockRequestCache

        it 'should return a promise with data', (done) ->
            comment.getCount mockUrl
                .done (data) ->
                    expect(data).to.be.eql 10
                    done()

        it 'should throw an error if the http call fails', ->
            comment.http = ->
                q.reject 'Mock Error'
            comment.getCount mockUrl
                .catch (e) ->
                    expect(e).to.be.instanceof Error
                .done()
