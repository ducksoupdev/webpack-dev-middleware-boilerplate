q = require 'q'
_ = require 'lodash'
urlLib = require 'url'
og = require 'open-graph'

class Gigya
    constructor: (contentRepositoryInstance, gigyaConfig, @http) ->
        # Note: http should be configured to parse as json
        throw new Error('Gigya: Need contentRepositoryInstance') unless contentRepositoryInstance
        throw new Error('Gigya: Needs RequestCache instance') unless @http
        throw new Error('Gigya: url does not exist in the config file') unless gigyaConfig.url

        @contentRepositoryInstance = contentRepositoryInstance
        @og = og

        # Load config
        isTest = gigyaConfig.isTest

        @getItemData = if isTest is true then @webScraper.bind(this) else @getContent.bind(this)

        # Config http
        @topSharedUrl = gigyaConfig.url

    webScraper: (item) ->
        deferred = q.defer()
        @og item.url, (err, meta) ->
            return deferred.reject err if err
            result = {link: item.url}
            result.headline = meta.title
            result.image = meta.image
            return deferred.resolve result

        deferred.promise


    getContent: (item) ->
        urlPath = if /^\//.test(item.url) then item.url else urlLib.parse(item.url).pathname
        @contentRepositoryInstance.getContent(urlPath)
            .then (sitecoreItem) ->
                result = {link: item.url}
                result.headline = sitecoreItem.headline
                result.image = sitecoreItem.media?[0]
                return result
            .fail -> return {}


    getTopShared: (limit = 5) ->
        @http(@topSharedUrl)
        .then (data) =>
            if !data or !data.mostShared or !data.mostShared.topShares or data.mostShared.statusCode != '200' then return []

            topShares = data.mostShared.topShares
            # topShares will be an object if there is a single item, but an array if there are multiple items
            if !Array.isArray(topShares)
                items = [topShares]
            else
                urls = {}
                items = topShares.map (share) ->
                    url = share.url.replace(/(\?|#).+/g, '').toLowerCase()
                    unless urls[url]
                        urls[url] = true
                    share

            q.all (_.map items.splice(0, 10), @getItemData)
        .then (responses) ->
            responses = _.filter(responses, (response) -> response.headline && response.image?)
            return {items: responses.splice(0, limit)}

module.exports = Gigya
