q = require 'q'

class Comment
    constructor: (@http) ->
        # Note: http should be configured to parse as json
        throw new Error 'Comment: Needs RequestCache' unless @http

    # @returns { valid: <true|false>, categoryId: <tvfix|wwos|music|celebrities>, streamId: <article_8901113> }
    getGigyaParams: (url) ->
        result = valid: false

        # Handle exclusions
        # 9news doesn't expose the article id from the url and no reverse-url-to-article id feature available in sitecore
        # eg. Gallery URLs - http://celebrities.ninemsn.com.au/assetslideshow.aspx?assetid=437616 doesn't have a comments section
        exclusions = [
            /9news.com/i
            /slideshow.aspx/i
        ]
        return result for excl in exclusions when url.match excl

        pattern = /(?:http[s]?\:\/\/)(?:www\.)?(.*?)\.(?=[^\/]*\..{2,5}).*?(?:.*\?)(.*id=[^&]*)/i

        if match = url.match pattern
            result.valid = true
            categoryId = match[1]

            # Ugly rewrite, duh!
            result.categoryId = categoryId.replace 'yourtv', 'tvfix'

            [type, value] = match[2].replace('id', '').split '='
            type = 'article' unless type
            result.streamId = [type, value].join '_'

        return result

    getCount: (url) ->
        gigyaParams = @getGigyaParams url
        return q(0) unless gigyaParams.valid

        defer = q.defer()

        apikey = '2_Nk4wTxN1XTr-DfXI0fUv54stQeMjSDAmQbKZv6HkUMncZqKFNNtvGlRSmaiT09Or'

        params = {apiKey: apikey, categoryID: gigyaParams.categoryId, streamID: gigyaParams.streamId}

        path = 'http://comments.gigya.com/comments.getComments'

        @http {url: path, query: params}
            .then (body) ->
                defer.resolve body.commentCount
            .fail (err) ->
                defer.reject new Error "Gigya API Error - #{err}"
        defer.promise

module.exports = Comment
