module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  Share: __webpack_require__(/*! ./share */ 1),
	  Comment: __webpack_require__(/*! ./comment */ 6),
	  Gigya: __webpack_require__(/*! ./gigya */ 7),
	  templates: {
	    share: __webpack_require__(/*! ../templates/share */ 3)
	  }
	};


/***/ },
/* 1 */
/*!**********************************!*\
  !*** ./src/scripts/share.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var Share, q;
	
	q = __webpack_require__(/*! q */ 2);
	
	Share = (function() {
	  Share.templates = {
	    share: __webpack_require__(/*! ../templates/share */ 3)
	  };
	
	  function Share(http) {
	    this.http = http;
	    if (!this.http) {
	      throw new Error('Share: Needs RequestCache');
	    }
	  }
	
	  Share.prototype.facebook = function(url) {
	    var params, path;
	    params = {
	      q: "SELECT total_count FROM link_stat WHERE url=\"" + url + "\""
	    };
	    path = 'https://graph.facebook.com/fql';
	    return this.http({
	      url: path,
	      query: params
	    }).then(function(body) {
	      return body.data[0].total_count;
	    }).fail(function(err) {
	      throw new Error("Facebook API Error - " + err);
	    });
	  };
	
	  Share.prototype.twitter = function(url) {
	    var params, path;
	    path = 'https://cdn.api.twitter.com/1/urls/count.json';
	    params = {
	      url: url
	    };
	    return this.http({
	      url: path,
	      query: params
	    }).then(function(body) {
	      return body.count;
	    }).fail(function(err) {
	      throw new Error("Twitter API Error - " + err);
	    });
	  };
	
	  Share.prototype.linkedin = function(url) {
	    var params, path;
	    path = 'http://www.linkedin.com/countserv/count/share';
	    params = {
	      format: 'json',
	      url: url
	    };
	    return this.http({
	      url: path,
	      query: params
	    }).then(function(body) {
	      return body.count;
	    }).fail(function(err) {
	      throw new Error("Linkedin API Error - " + err);
	    });
	  };
	
	  Share.prototype.get = function(url) {
	    return q.allSettled([this.facebook(url), this.twitter(url), this.linkedin(url)]).spread(function(fa, tw, li) {
	      var faCount, liCount, twCount;
	      faCount = fa.state === 'fulfilled' ? fa.value : 0;
	      twCount = tw.state === 'fulfilled' ? tw.value : 0;
	      liCount = li.state === 'fulfilled' ? li.value : 0;
	      return {
	        facebook: faCount,
	        twitter: twCount,
	        linkedin: liCount,
	        total: faCount + twCount + liCount
	      };
	    });
	  };
	
	  return Share;
	
	})();
	
	module.exports = Share;


/***/ },
/* 2 */
/*!********************!*\
  !*** external "q" ***!
  \********************/
/***/ function(module, exports) {

	module.exports = require("q");

/***/ },
/* 3 */
/*!**********************************!*\
  !*** ./src/templates/share.jade ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 4);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (media, model) {
	var decorator = 'social.share';
	var url = model.url;
	var title = model.headline;
	var abstract = model.abstract;
	var description = model.description;
	var id = model.id;
	var shareId = model.shareId;
	var mediaUrl = (media != null && media.type === 'image') ? media.url: false
	buf.push("<div" + (jade.attr("data-module", decorator, true, false)) + (jade.attr("data-url", url, true, false)) + (jade.attr("data-title", title, true, false)) + (jade.attr("data-description", description, true, false)) + (jade.attr("data-media", mediaUrl, true, false)) + " class=\"share module\"><div" + (jade.attr("id", "share_" + (id) + "_" + (shareId) + "", true, false)) + " class=\"share__icons\"></div></div>");}.call(this,"media" in locals_for_with?locals_for_with.media:typeof media!=="undefined"?media:undefined,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 4 */
/*!*******************************!*\
  !*** ./~/jade/lib/runtime.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(/*! fs */ 5).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 5 */
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 6 */
/*!************************************!*\
  !*** ./src/scripts/comment.coffee ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Comment, q;
	
	q = __webpack_require__(/*! q */ 2);
	
	Comment = (function() {
	  function Comment(http) {
	    this.http = http;
	    if (!this.http) {
	      throw new Error('Comment: Needs RequestCache');
	    }
	  }
	
	  Comment.prototype.getGigyaParams = function(url) {
	    var categoryId, excl, exclusions, i, len, match, pattern, ref, result, type, value;
	    result = {
	      valid: false
	    };
	    exclusions = [/9news.com/i, /slideshow.aspx/i];
	    for (i = 0, len = exclusions.length; i < len; i++) {
	      excl = exclusions[i];
	      if (url.match(excl)) {
	        return result;
	      }
	    }
	    pattern = /(?:http[s]?\:\/\/)(?:www\.)?(.*?)\.(?=[^\/]*\..{2,5}).*?(?:.*\?)(.*id=[^&]*)/i;
	    if (match = url.match(pattern)) {
	      result.valid = true;
	      categoryId = match[1];
	      result.categoryId = categoryId.replace('yourtv', 'tvfix');
	      ref = match[2].replace('id', '').split('='), type = ref[0], value = ref[1];
	      if (!type) {
	        type = 'article';
	      }
	      result.streamId = [type, value].join('_');
	    }
	    return result;
	  };
	
	  Comment.prototype.getCount = function(url) {
	    var apikey, defer, gigyaParams, params, path;
	    gigyaParams = this.getGigyaParams(url);
	    if (!gigyaParams.valid) {
	      return q(0);
	    }
	    defer = q.defer();
	    apikey = '2_Nk4wTxN1XTr-DfXI0fUv54stQeMjSDAmQbKZv6HkUMncZqKFNNtvGlRSmaiT09Or';
	    params = {
	      apiKey: apikey,
	      categoryID: gigyaParams.categoryId,
	      streamID: gigyaParams.streamId
	    };
	    path = 'http://comments.gigya.com/comments.getComments';
	    this.http({
	      url: path,
	      query: params
	    }).then(function(body) {
	      return defer.resolve(body.commentCount);
	    }).fail(function(err) {
	      return defer.reject(new Error("Gigya API Error - " + err));
	    });
	    return defer.promise;
	  };
	
	  return Comment;
	
	})();
	
	module.exports = Comment;


/***/ },
/* 7 */
/*!**********************************!*\
  !*** ./src/scripts/gigya.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	var Gigya, _, og, q, urlLib;
	
	q = __webpack_require__(/*! q */ 2);
	
	_ = __webpack_require__(/*! lodash */ 8);
	
	urlLib = __webpack_require__(/*! url */ 9);
	
	og = __webpack_require__(/*! open-graph */ 10);
	
	Gigya = (function() {
	  function Gigya(contentRepositoryInstance, gigyaConfig, http) {
	    var isTest;
	    this.http = http;
	    if (!contentRepositoryInstance) {
	      throw new Error('Gigya: Need contentRepositoryInstance');
	    }
	    if (!this.http) {
	      throw new Error('Gigya: Needs RequestCache instance');
	    }
	    if (!gigyaConfig.url) {
	      throw new Error('Gigya: url does not exist in the config file');
	    }
	    this.contentRepositoryInstance = contentRepositoryInstance;
	    this.og = og;
	    isTest = gigyaConfig.isTest;
	    this.getItemData = isTest === true ? this.webScraper.bind(this) : this.getContent.bind(this);
	    this.topSharedUrl = gigyaConfig.url;
	  }
	
	  Gigya.prototype.webScraper = function(item) {
	    var deferred;
	    deferred = q.defer();
	    this.og(item.url, function(err, meta) {
	      var result;
	      if (err) {
	        return deferred.reject(err);
	      }
	      result = {
	        link: item.url
	      };
	      result.headline = meta.title;
	      result.image = meta.image;
	      return deferred.resolve(result);
	    });
	    return deferred.promise;
	  };
	
	  Gigya.prototype.getContent = function(item) {
	    var urlPath;
	    urlPath = /^\//.test(item.url) ? item.url : urlLib.parse(item.url).pathname;
	    return this.contentRepositoryInstance.getContent(urlPath).then(function(sitecoreItem) {
	      var ref, result;
	      result = {
	        link: item.url
	      };
	      result.headline = sitecoreItem.headline;
	      result.image = (ref = sitecoreItem.media) != null ? ref[0] : void 0;
	      return result;
	    }).fail(function() {
	      return {};
	    });
	  };
	
	  Gigya.prototype.getTopShared = function(limit) {
	    if (limit == null) {
	      limit = 5;
	    }
	    return this.http(this.topSharedUrl).then((function(_this) {
	      return function(data) {
	        var items, topShares, urls;
	        if (!data || !data.mostShared || !data.mostShared.topShares || data.mostShared.statusCode !== '200') {
	          return [];
	        }
	        topShares = data.mostShared.topShares;
	        if (!Array.isArray(topShares)) {
	          items = [topShares];
	        } else {
	          urls = {};
	          items = topShares.map(function(share) {
	            var url;
	            url = share.url.replace(/(\?|#).+/g, '').toLowerCase();
	            if (!urls[url]) {
	              urls[url] = true;
	            }
	            return share;
	          });
	        }
	        return q.all(_.map(items.splice(0, 10), _this.getItemData));
	      };
	    })(this)).then(function(responses) {
	      responses = _.filter(responses, function(response) {
	        return response.headline && (response.image != null);
	      });
	      return {
	        items: responses.splice(0, limit)
	      };
	    });
	  };
	
	  return Gigya;
	
	})();
	
	module.exports = Gigya;


/***/ },
/* 8 */
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 9 */
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ function(module, exports) {

	module.exports = require("url");

/***/ },
/* 10 */
/*!*****************************!*\
  !*** external "open-graph" ***!
  \*****************************/
/***/ function(module, exports) {

	module.exports = require("open-graph");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,