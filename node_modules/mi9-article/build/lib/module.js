module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************************!*\
  !*** ./src/scripts/index.coffee ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./article */ 1);


/***/ },
/* 1 */
/*!************************************!*\
  !*** ./src/scripts/article.coffee ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var Article, _, ads, cheerio, getViewModel, imageResizer, q, social, templates,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	
	q = __webpack_require__(/*! q */ 2);
	
	_ = __webpack_require__(/*! lodash */ 3);
	
	cheerio = __webpack_require__(/*! cheerio */ 4);
	
	social = __webpack_require__(/*! mi9-social */ 5);
	
	ads = __webpack_require__(/*! mi9-ads-common */ 6);
	
	imageResizer = __webpack_require__(/*! mi9-image-resizer */ 7);
	
	templates = __webpack_require__(/*! mi9-templates-common */ 8);
	
	getViewModel = __webpack_require__(/*! ./viewModel */ 9);
	
	Article = (function() {
	  function Article(arg) {
	    var config, contentRepository, imageResizer;
	    contentRepository = arg.contentRepository, imageResizer = arg.imageResizer, config = arg.config;
	    this.viewModel = bind(this.viewModel, this);
	    this.contentRepository = contentRepository;
	    this.imageResizer = imageResizer;
	    this.config = config;
	    this.getViewModel = getViewModel;
	  }
	
	  Article.prototype.templates = {
	    outbrain: templates.outbrain,
	    author: templates.author,
	    videoBlock: templates.videoBlock,
	    ad: ads.templates.ad,
	    share: social.templates.share,
	    imageResizer: imageResizer.templates.imageResizer,
	    article: __webpack_require__(/*! ../templates/article */ 11),
	    comments: __webpack_require__(/*! ../templates/comments */ 14),
	    related: __webpack_require__(/*! ../templates/related */ 15)
	  };
	
	  Article.prototype.injectAds = function(htmlString) {
	    var $, bodyContent, significantParagraphs;
	    $ = cheerio.load(htmlString, {
	      decodeEntities: false
	    });
	    bodyContent = [];
	    significantParagraphs = [];
	    $.root().contents().map(function(i, el) {
	      if ($(this).text().trim() !== '') {
	        significantParagraphs.push(i);
	      }
	      return bodyContent.push($.html(this));
	    });
	    if (significantParagraphs.length > 3) {
	      bodyContent.splice(significantParagraphs[3], 0, this.templates.ad({
	        type: 'ad',
	        adType: 'MEDIUM'
	      }));
	    }
	    return bodyContent.join('');
	  };
	
	  Article.prototype.injectVideos = function(htmlString) {
	    var $;
	    $ = cheerio.load(htmlString, {
	      decodeEntities: false
	    });
	    $('img[data-video-id]').each((function(_this) {
	      return function(index, element) {
	        var view;
	        view = _this.templates.videoBlock({
	          model: {
	            urn: $(element).data('video-id'),
	            url: $(element).attr('src')
	          }
	        });
	        if (view) {
	          return $(element).replaceWith(view);
	        }
	      };
	    })(this));
	    return $.html();
	  };
	
	  Article.prototype.viewModel = function(dataModel) {
	    var bodyCopyWithAdsAndVideos, viewModelData;
	    viewModelData = this.getViewModel(dataModel, this.imageResizer, this.config);
	    bodyCopyWithAdsAndVideos = this.injectVideos(this.injectAds(viewModelData.current.bodyCopy));
	    return _.merge({}, viewModelData, bodyCopyWithAdsAndVideos);
	  };
	
	  return Article;
	
	})();
	
	module.exports = Article;


/***/ },
/* 2 */
/*!********************!*\
  !*** external "q" ***!
  \********************/
/***/ function(module, exports) {

	module.exports = require("q");

/***/ },
/* 3 */
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ function(module, exports) {

	module.exports = require("lodash");

/***/ },
/* 4 */
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ function(module, exports) {

	module.exports = require("cheerio");

/***/ },
/* 5 */
/*!*****************************!*\
  !*** external "mi9-social" ***!
  \*****************************/
/***/ function(module, exports) {

	module.exports = require("mi9-social");

/***/ },
/* 6 */
/*!*********************************!*\
  !*** external "mi9-ads-common" ***!
  \*********************************/
/***/ function(module, exports) {

	module.exports = require("mi9-ads-common");

/***/ },
/* 7 */
/*!************************************!*\
  !*** external "mi9-image-resizer" ***!
  \************************************/
/***/ function(module, exports) {

	module.exports = require("mi9-image-resizer");

/***/ },
/* 8 */
/*!***************************************!*\
  !*** external "mi9-templates-common" ***!
  \***************************************/
/***/ function(module, exports) {

	module.exports = require("mi9-templates-common");

/***/ },
/* 9 */
/*!**************************************!*\
  !*** ./src/scripts/viewModel.coffee ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	var _, buildAbsoluteUrl, buildMedia, config, filterAndMapTags, getImageSets, getRelatedDataModel, getViewModel, imageResizer, injectAds, injectAdsAndVideo, injectVideos, utils;
	
	_ = __webpack_require__(/*! lodash */ 3);
	
	utils = __webpack_require__(/*! mi9-utils */ 10);
	
	config = null;
	
	imageResizer = null;
	
	getImageSets = function(imageData) {
	  if (!imageData) {
	    return {};
	  }
	  return imageResizer.getResizedImageSet(imageData.url, {
	    width: imageData.width
	  });
	};
	
	getRelatedDataModel = function(related) {
	  if (!related) {
	    return {};
	  }
	  return {
	    media: _.merge({}, related, related.media[0], {
	      urlSet: buildMedia(related.media)
	    }),
	    url: buildAbsoluteUrl(related.url)
	  };
	};
	
	buildMedia = function(media) {
	  if (!(media != null ? media[0] : void 0)) {
	    return {};
	  }
	  return JSON.stringify(getImageSets(media[0]));
	};
	
	buildAbsoluteUrl = function(url) {
	  if (!url) {
	    return '';
	  }
	  return utils.contentUrlBuilder({
	    url: url,
	    domain: config.server.publicHost,
	    base: config.sitecore.contentBasePath
	  });
	};
	
	injectAds = function(htmlString) {
	  var $, bodyContent, significantParagraphs;
	  $ = cheerio.load(htmlString, {
	    decodeEntities: false
	  });
	  bodyContent = [];
	  significantParagraphs = [];
	  $.root().contents().map(function(i, el) {
	    if ($(this).text().trim() !== '') {
	      significantParagraphs.push(i);
	    }
	    return bodyContent.push($.html(this));
	  });
	  if (significantParagraphs.length > 3) {
	    bodyContent.splice(significantParagraphs[3], 0, ads.templates.ad({
	      type: 'ad',
	      adType: 'MEDIUM'
	    }));
	  }
	  return bodyContent.join('');
	};
	
	injectVideos = function(htmlString) {
	  var $;
	  $ = cheerio.load(htmlString, {
	    decodeEntities: false
	  });
	  $('img[data-video-id]').each((function(_this) {
	    return function(index, element) {
	      var view;
	      view = _this.templates.videoBlock({
	        model: {
	          urn: $(element).data('video-id'),
	          url: $(element).attr('src')
	        }
	      });
	      if (view) {
	        return $(element).replaceWith(view);
	      }
	    };
	  })(this));
	  return $.html();
	};
	
	injectAdsAndVideo = function(body) {
	  var bodyWithVideo;
	  bodyWithVideo = injectVideos(body);
	  return injectAds(bodyWithVideo);
	};
	
	filterAndMapTags = function(tags) {
	  return tags.filter(function(tag) {
	    return tag !== '';
	  }).map(function(tag) {
	    return {
	      name: tag,
	      url: tag.toLowerCase()
	    };
	  });
	};
	
	getViewModel = function(dataModel, imageResizerInstance, configObj) {
	  var abstractNoMarkup, descriptionNoMarkup, headlineNoMarkup, mediaObj, shareData;
	  config = configObj;
	  imageResizer = imageResizerInstance;
	  console.log(imageResizerInstance);
	  mediaObj = _.merge({}, dataModel.media[0], {
	    urlSet: buildMedia(dataModel.media)
	  });
	  headlineNoMarkup = utils.nomarkup(dataModel.headline);
	  abstractNoMarkup = dataModel.abstract ? utils.nomarkup(dataModel.abstract) : '';
	  descriptionNoMarkup = dataModel.description ? utils.nomarkup(dataModel.description) : '';
	  shareData = {
	    model: {
	      url: dataModel.url,
	      title: headlineNoMarkup,
	      abstract: abstractNoMarkup,
	      description: descriptionNoMarkup,
	      id: dataModel.id,
	      shareId: dataModel.shareId,
	      media: mediaObj
	    }
	  };
	  return {
	    current: {
	      id: dataModel.id,
	      headline: dataModel.headline || '',
	      abstract: dataModel.abstract || '',
	      description: (dataModel.abstract || '') + (dataModel.description || ''),
	      displayDateTime: utils.timeAgo(dataModel.displayDateTime),
	      media: mediaObj,
	      url: buildAbsoluteUrl(dataModel.url),
	      tags: filterAndMapTags(dataModel.tags) || [],
	      author: dataModel.author || {},
	      nomarkup: {
	        headline: headlineNoMarkup,
	        abstract: abstractNoMarkup,
	        description: descriptionNoMarkup
	      },
	      shareId: utils.uuid(),
	      shareData: shareData,
	      videoId: dataModel.media.type === 'video' ? utils.uuid() : void 0,
	      bodyCopy: dataModel.bodyCopy
	    },
	    next: getRelatedDataModel(dataModel.next),
	    previous: getRelatedDataModel(dataModel.previous),
	    header: dataModel.header,
	    partials: dataModel.templates,
	    settings: dataModel.settings || {},
	    outbrain: dataModel.outbrain || {},
	    meta: dataModel.meta || {},
	    tracking: dataModel.tracking || {}
	  };
	};
	
	module.exports = getViewModel;


/***/ },
/* 10 */
/*!****************************!*\
  !*** external "mi9-utils" ***!
  \****************************/
/***/ function(module, exports) {

	module.exports = require("mi9-utils");

/***/ },
/* 11 */
/*!************************************!*\
  !*** ./src/templates/article.jade ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 12);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (current, meta, next, outbrain, partials, previous, settings, tracking, trackingLinkName, undefined) {
	buf.push("<article data-module=\"decorators/trackingDecorator\" class=\"article module showVideoPlaylist showVideoPlaceholder\"><h1 class=\"article__headline\">" + (null == (jade_interp = current.headline) ? "" : jade_interp) + "</h1><div class=\"article__byline\">" + (null == (jade_interp = partials.author({model: current.author})) ? "" : jade_interp) + "</div><span class=\"article__time--desktop time\">" + (null == (jade_interp = current.displayDateTime) ? "" : jade_interp) + "</span>");
	if ( current.media.type == "video")
	{
	buf.push(null == (jade_interp = partials.videoBlock({model: current, partials: partials})) ? "" : jade_interp);
	}
	else
	{
	buf.push(null == (jade_interp = partials.imageResizer({model: current.media})) ? "" : jade_interp);
	}
	if ( current.media.caption)
	{
	buf.push("<div class=\"article__hero-caption\">" + (null == (jade_interp = current.media.caption) ? "" : jade_interp) + "</div>");
	}
	buf.push("<div class=\"article__social\">");
	if ( settings.enableGigyaSharingButtons)
	{
	buf.push("<div class=\"article__share share--responsive\">" + (null == (jade_interp = partials.share(current.shareData)) ? "" : jade_interp) + "</div>");
	}
	if ( settings.enableGigyaComments)
	{
	buf.push("<a href=\"#comments\" data-tracking-link-name=\"article__comments-jump\" class=\"article__comments-jump\"><div class=\"article__comments-icon\"></div><span>Comments</span></a>");
	}
	buf.push("</div><span class=\"article__time--mobile time\">" + (null == (jade_interp = current.displayDateTime) ? "" : jade_interp) + "</span><div class=\"article__body\">" + (null == (jade_interp = current.bodyCopy) ? "" : jade_interp) + "</div><ul class=\"article__tags\">");
	if ( tracking.site != null)
	{
	buf.push("<li class=\"article__tag\"><a" + (jade.attr("href", "/" + (tracking.site) + "", true, false)) + " data-tracking-link-name=\"article_section\">" + (null == (jade_interp = tracking.site) ? "" : jade_interp) + "</a></li>");
	}
	// iterate current.tags
	;(function(){
	  var $$obj = current.tags;
	  if ('number' == typeof $$obj.length) {
	
	    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
	      var tag = $$obj[$index];
	
	buf.push("<li class=\"article__tag\"><a" + (jade.attr("href", "/" + (tag.url) + "", true, false)) + " data-tracking-link-name=\"article__tag\">" + (null == (jade_interp = tag.name) ? "" : jade_interp) + "</a></li>");
	    }
	
	  } else {
	    var $$l = 0;
	    for (var $index in $$obj) {
	      $$l++;      var tag = $$obj[$index];
	
	buf.push("<li class=\"article__tag\"><a" + (jade.attr("href", "/" + (tag.url) + "", true, false)) + " data-tracking-link-name=\"article__tag\">" + (null == (jade_interp = tag.name) ? "" : jade_interp) + "</a></li>");
	    }
	
	  }
	}).call(this);
	
	buf.push("</ul><div class=\"article__related\">");
	if ( previous)
	{
	buf.push("<div class=\"article__related-item article__related-item--previous\"><h3>Previous</h3>" + (null == (jade_interp = partials.related({trackingLinkName: 'article_previous', model: previous, partials: partials})) ? "" : jade_interp) + "</div>");
	}
	if ( next)
	{
	trackingLinkName = 'article_next'
	buf.push("<div class=\"article__related-item article__related-item--next\"><h3>Next</h3>" + (null == (jade_interp = partials.related({trackingLinkName: 'article_next', model: next, partials: partials})) ? "" : jade_interp) + "</div>");
	}
	buf.push("</div>");
	if ( settings.enableOutbrainRecommended)
	{
	buf.push("<div class=\"article__outbrain\">" + (null == (jade_interp = partials.outbrain({model: {url: meta.url, widgetId: outbrain.widgetId, obTemplate: outbrain.obTemplate}})) ? "" : jade_interp) + "</div>");
	}
	if ( settings.enableGigyaComments)
	{
	buf.push("<div id=\"comments\" class=\"article__comments\"><h3 class=\"article_comments-header\">Post a comment on this story</h3>" + (null == (jade_interp = partials.comments({model: {id: current.id, url: current.url, sitename: meta.sitename}})) ? "" : jade_interp) + "</div>");
	}
	buf.push("</article>");}.call(this,"current" in locals_for_with?locals_for_with.current:typeof current!=="undefined"?current:undefined,"meta" in locals_for_with?locals_for_with.meta:typeof meta!=="undefined"?meta:undefined,"next" in locals_for_with?locals_for_with.next:typeof next!=="undefined"?next:undefined,"outbrain" in locals_for_with?locals_for_with.outbrain:typeof outbrain!=="undefined"?outbrain:undefined,"partials" in locals_for_with?locals_for_with.partials:typeof partials!=="undefined"?partials:undefined,"previous" in locals_for_with?locals_for_with.previous:typeof previous!=="undefined"?previous:undefined,"settings" in locals_for_with?locals_for_with.settings:typeof settings!=="undefined"?settings:undefined,"tracking" in locals_for_with?locals_for_with.tracking:typeof tracking!=="undefined"?tracking:undefined,"trackingLinkName" in locals_for_with?locals_for_with.trackingLinkName:typeof trackingLinkName!=="undefined"?trackingLinkName:undefined,"undefined" in locals_for_with?locals_for_with.undefined: false?undefined:undefined));;return buf.join("");
	}

/***/ },
/* 12 */
/*!*******************************!*\
  !*** ./~/jade/lib/runtime.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Merge two attribute objects giving precedence
	 * to values in object `b`. Classes are special-cased
	 * allowing for arrays and merging/joining appropriately
	 * resulting in a string.
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 * @api private
	 */
	
	exports.merge = function merge(a, b) {
	  if (arguments.length === 1) {
	    var attrs = a[0];
	    for (var i = 1; i < a.length; i++) {
	      attrs = merge(attrs, a[i]);
	    }
	    return attrs;
	  }
	  var ac = a['class'];
	  var bc = b['class'];
	
	  if (ac || bc) {
	    ac = ac || [];
	    bc = bc || [];
	    if (!Array.isArray(ac)) ac = [ac];
	    if (!Array.isArray(bc)) bc = [bc];
	    a['class'] = ac.concat(bc).filter(nulls);
	  }
	
	  for (var key in b) {
	    if (key != 'class') {
	      a[key] = b[key];
	    }
	  }
	
	  return a;
	};
	
	/**
	 * Filter null `val`s.
	 *
	 * @param {*} val
	 * @return {Boolean}
	 * @api private
	 */
	
	function nulls(val) {
	  return val != null && val !== '';
	}
	
	/**
	 * join array as classes.
	 *
	 * @param {*} val
	 * @return {String}
	 */
	exports.joinClasses = joinClasses;
	function joinClasses(val) {
	  return (Array.isArray(val) ? val.map(joinClasses) :
	    (val && typeof val === 'object') ? Object.keys(val).filter(function (key) { return val[key]; }) :
	    [val]).filter(nulls).join(' ');
	}
	
	/**
	 * Render the given classes.
	 *
	 * @param {Array} classes
	 * @param {Array.<Boolean>} escaped
	 * @return {String}
	 */
	exports.cls = function cls(classes, escaped) {
	  var buf = [];
	  for (var i = 0; i < classes.length; i++) {
	    if (escaped && escaped[i]) {
	      buf.push(exports.escape(joinClasses([classes[i]])));
	    } else {
	      buf.push(joinClasses(classes[i]));
	    }
	  }
	  var text = joinClasses(buf);
	  if (text.length) {
	    return ' class="' + text + '"';
	  } else {
	    return '';
	  }
	};
	
	
	exports.style = function (val) {
	  if (val && typeof val === 'object') {
	    return Object.keys(val).map(function (style) {
	      return style + ':' + val[style];
	    }).join(';');
	  } else {
	    return val;
	  }
	};
	/**
	 * Render the given attribute.
	 *
	 * @param {String} key
	 * @param {String} val
	 * @param {Boolean} escaped
	 * @param {Boolean} terse
	 * @return {String}
	 */
	exports.attr = function attr(key, val, escaped, terse) {
	  if (key === 'style') {
	    val = exports.style(val);
	  }
	  if ('boolean' == typeof val || null == val) {
	    if (val) {
	      return ' ' + (terse ? key : key + '="' + key + '"');
	    } else {
	      return '';
	    }
	  } else if (0 == key.indexOf('data') && 'string' != typeof val) {
	    if (JSON.stringify(val).indexOf('&') !== -1) {
	      console.warn('Since Jade 2.0.0, ampersands (`&`) in data attributes ' +
	                   'will be escaped to `&amp;`');
	    };
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will eliminate the double quotes around dates in ' +
	                   'ISO form after 2.0.0');
	    }
	    return ' ' + key + "='" + JSON.stringify(val).replace(/'/g, '&apos;') + "'";
	  } else if (escaped) {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + exports.escape(val) + '"';
	  } else {
	    if (val && typeof val.toISOString === 'function') {
	      console.warn('Jade will stringify dates in ISO form after 2.0.0');
	    }
	    return ' ' + key + '="' + val + '"';
	  }
	};
	
	/**
	 * Render the given attributes object.
	 *
	 * @param {Object} obj
	 * @param {Object} escaped
	 * @return {String}
	 */
	exports.attrs = function attrs(obj, terse){
	  var buf = [];
	
	  var keys = Object.keys(obj);
	
	  if (keys.length) {
	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i]
	        , val = obj[key];
	
	      if ('class' == key) {
	        if (val = joinClasses(val)) {
	          buf.push(' ' + key + '="' + val + '"');
	        }
	      } else {
	        buf.push(exports.attr(key, val, false, terse));
	      }
	    }
	  }
	
	  return buf.join('');
	};
	
	/**
	 * Escape the given string of `html`.
	 *
	 * @param {String} html
	 * @return {String}
	 * @api private
	 */
	
	var jade_encode_html_rules = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;'
	};
	var jade_match_html = /[&<>"]/g;
	
	function jade_encode_char(c) {
	  return jade_encode_html_rules[c] || c;
	}
	
	exports.escape = jade_escape;
	function jade_escape(html){
	  var result = String(html).replace(jade_match_html, jade_encode_char);
	  if (result === '' + html) return html;
	  else return result;
	};
	
	/**
	 * Re-throw the given `err` in context to the
	 * the jade in `filename` at the given `lineno`.
	 *
	 * @param {Error} err
	 * @param {String} filename
	 * @param {String} lineno
	 * @api private
	 */
	
	exports.rethrow = function rethrow(err, filename, lineno, str){
	  if (!(err instanceof Error)) throw err;
	  if ((typeof window != 'undefined' || !filename) && !str) {
	    err.message += ' on line ' + lineno;
	    throw err;
	  }
	  try {
	    str = str || __webpack_require__(/*! fs */ 13).readFileSync(filename, 'utf8')
	  } catch (ex) {
	    rethrow(err, null, lineno)
	  }
	  var context = 3
	    , lines = str.split('\n')
	    , start = Math.max(lineno - context, 0)
	    , end = Math.min(lines.length, lineno + context);
	
	  // Error context
	  var context = lines.slice(start, end).map(function(line, i){
	    var curr = i + start + 1;
	    return (curr == lineno ? '  > ' : '    ')
	      + curr
	      + '| '
	      + line;
	  }).join('\n');
	
	  // Alter exception message
	  err.path = filename;
	  err.message = (filename || 'Jade') + ':' + lineno
	    + '\n' + context + '\n\n' + err.message;
	  throw err;
	};
	
	exports.DebugItem = function DebugItem(lineno, filename) {
	  this.lineno = lineno;
	  this.filename = filename;
	}


/***/ },
/* 13 */
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 14 */
/*!*************************************!*\
  !*** ./src/templates/comments.jade ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 12);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model) {
	buf.push("<div" + (jade.attr("id", model.id, true, false)) + " data-module=\"decorators/commentsDecorator\"" + (jade.attr("data-category-id", model.sitename, true, false)) + (jade.attr("data-stream-id", model.url, true, false)) + " class=\"comments module\"></div>");}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined));;return buf.join("");
	}

/***/ },
/* 15 */
/*!************************************!*\
  !*** ./src/templates/related.jade ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	var jade = __webpack_require__(/*! ./~/jade/lib/runtime.js */ 12);
	
	module.exports = function template(locals) {
	var buf = [];
	var jade_mixins = {};
	var jade_interp;
	;var locals_for_with = (locals || {});(function (model, partials) {
	buf.push("<a" + (jade.attr("href", model.url, true, false)) + (jade.attr("data-tracking-link-name", model.trackingLinkName, true, false)) + " class=\"related heading-link\">");
	if ( model.media)
	{
	buf.push("<div class=\"related__image\">" + (null == (jade_interp = partials.imageResizer({model: model.media})) ? "" : jade_interp) + "</div><div class=\"related__heading\">" + (null == (jade_interp = model.media.headline) ? "" : jade_interp) + "</div>");
	}
	buf.push("</a>");}.call(this,"model" in locals_for_with?locals_for_with.model:typeof model!=="undefined"?model:undefined,"partials" in locals_for_with?locals_for_with.partials:typeof partials!=="undefined"?partials:undefined));;return buf.join("");
	}

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,