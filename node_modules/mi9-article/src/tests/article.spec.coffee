q = require 'q'
sinon = require 'sinon'
chai = require 'chai'
sinonChai = require('sinon-chai')
chai.should()
chai.use(sinonChai)
{expect} = chai
Article = require '../scripts/article'


describe 'Article', ->
    article = null

    paragraphsMarkup = '<p>Studies show that more and more people are opting to build their homes on a pork belly foundation and bacon walls.&nbsp;</p>
        <p>The revolutionary new techniques that have been in development since the 1940s are taking surburban San Francisco by storm.&nbsp;</p>
        <p>Police are reporting a 100% drop in crime rate in the area due to burglars casing a joint in the literal sense of the word, after eating themselves into a food coma, homeowners are then able to notify the authorities to come pick up these potbellyd perpetrators.&nbsp;</p>
        <p><a href="https://twitter.com/MapleLeafFoods/status/618152871268253696" rel="nofollow" class="embed-social embed-twitter">https://twitter.com/MapleLeafFoods/status/618152871268253696</a></p>
        <p>&nbsp;</p>
        <p>&nbsp;</p>
        <p><img src="http://progressive.netshow.ninemsn.com.au/media2/664969388001/2014/08/664969388001_3718251125001_8047247-20140807-131932-VIDEO-STILL.jpg?pubId=664969388001" data-video-id="3718282483001" alt="Human Slinky" caption="This human Slinky dance by a Romanian performer will haunt your nightmares"></p>'

    paragraphShortMarkup = "<p>Studies show that more and more people are opting to build their homes on a pork belly foundation and bacon walls.&nbsp;</p>
            <p>The revolutionary new techniques that have been in development since the 1940s are taking surburban San Francisco by storm.&nbsp;</p>"

    contentRepository =
        getRelated: sinon.stub()

    contentRepository =
        getRelated: sinon.stub()

    imageResizer =
        getResizedImageSet: sinon.stub()

    config =
        server:
            publicHost: 'http://google.com'
        sitecore:
            contentBasePath: '/'


    describe 'constructor', ->

        beforeEach ->
            article = new Article({contentRepository, imageResizer, config})

        it 'should have a contentRepository instance exposed', ->
            expect(article.contentRepository).to.eql contentRepository

        it 'should have an image resizer instance exposed', ->
            expect(article.imageResizer).to.eql imageResizer

        it 'should have a config object exposed', ->
            expect(article.config).to.eql config


    ### GO TO THE FIX FOR FIXTURE DATA
    #    describe 'inject ads', ->
    #    describe 'inject video', ->
    ###

    describe 'injectAds', ->

        beforeEach ->
            article = new Article({contentRepository, imageResizer, config})

        it 'should inject an ad when the into the string when more than 5 paragraphs long', ->
            markup = article.injectAds(paragraphsMarkup)
            expect(markup).to.contain 'widget widget-ad'

        it 'should not inject an ad when article is less than 5 paragraphs long', ->
            markup = article.injectAds(paragraphShortMarkup)
            expect(markup).to.not.contain 'widget widget-ad'

        it 'should just return the markup if no ad is found', ->
            markup = article.injectAds(paragraphShortMarkup)
            expect(markup).to.equal paragraphShortMarkup


    describe 'injectVideos', ->
        beforeEach ->
            article = new Article({contentRepository, imageResizer, config})

        it 'should inject a video into the article when it has a video-id img tag', ->
            markup = article.injectVideos(paragraphsMarkup)
            expect(markup).to.contain 'video-block module'

        it 'should not inject a video that doesnt have a video-id img tag', ->
            markup = article.injectVideos(paragraphShortMarkup)
            expect(markup).to.not.contain 'video-block module'

        it 'should just return the markup if no video is found', ->
            markup = article.injectVideos(paragraphShortMarkup)
            expect(markup).to.equal paragraphShortMarkup

    describe 'viewModel', ->
        article = null
        dataModel =
            id: 'fakeId'

        beforeEach ->
            article = new Article({contentRepository, imageResizer, config})

        it 'should call getViewModel', ->
            article.getViewModel = sinon.stub().returns {
                current:
                    bodyCopy: paragraphsMarkup
            }
            article.viewModel(dataModel)
            expect(article.getViewModel).to.have.been.calledWith dataModel, imageResizer, config

        it 'should call injectAds', ->
            article.getViewModel = -> {
                current:
                    bodyCopy: paragraphsMarkup
            }
            article.injectAds = sinon.stub().returns paragraphsMarkup
            article.viewModel(dataModel)
            expect(article.injectAds).to.have.been.called

        it 'should call injectAds', ->
            article.getViewModel = -> {
                current:
                    bodyCopy: paragraphsMarkup
            }
            article.injectAds = -> paragraphsMarkup
            article.injectVideos = sinon.stub()
            article.viewModel(dataModel)
            expect(article.injectVideos).to.have.been.called
