_ = require 'lodash'
utils = require 'mi9-utils'
config = null
imageResizer = null

getImageSets = (imageData) ->
    return {} unless imageData
    imageResizer.getResizedImageSet(imageData.url, {width: imageData.width})

getRelatedDataModel = (related) ->
    return {} unless related
    return {
        media: _.merge {}, related, related.media[0], {urlSet: buildMedia(related.media)}
        url: buildAbsoluteUrl(related.url)
    }

buildMedia = (media) ->
    return {} unless media?[0]
    JSON.stringify getImageSets media[0]

buildAbsoluteUrl = (url) ->
    return '' unless url
    utils.contentUrlBuilder({url, domain: config.server.publicHost, base: config.sitecore.contentBasePath})

injectAds = (htmlString) ->
    $ = cheerio.load htmlString, decodeEntities: false
    bodyContent = []
    significantParagraphs = []

    $.root().contents().map (i, el) ->
        significantParagraphs.push i if $(this).text().trim() isnt ''
        bodyContent.push $.html(this)

    if significantParagraphs.length > 3
        # inject ad after fifth paragraph that contains text
        bodyContent.splice significantParagraphs[3], 0, ads.templates.ad({type: 'ad', adType: 'MEDIUM'})

    return bodyContent.join('')

injectVideos = (htmlString) ->
    $ = cheerio.load htmlString, decodeEntities: false

    $('img[data-video-id]').each (index, element) =>
        view = @templates.videoBlock(
            model: {
                urn: $(element).data('video-id')
                url: $(element).attr('src')
            }
        )
        $(element).replaceWith(view) if view

    return $.html()


injectAdsAndVideo = (body) ->
    bodyWithVideo = injectVideos(body)
    return injectAds(bodyWithVideo)


filterAndMapTags = (tags) ->
    tags.filter((tag) -> tag isnt '')
        .map (tag) ->
            return {
                name: tag
                url: tag.toLowerCase()
            }

getViewModel = (dataModel, imageResizerInstance, configObj) ->
    config = configObj
    imageResizer = imageResizerInstance
    console.log imageResizerInstance

    mediaObj = _.merge {}, dataModel.media[0], {urlSet: buildMedia(dataModel.media)}

    ## No Markup data
    headlineNoMarkup = utils.nomarkup(dataModel.headline)
    abstractNoMarkup = if dataModel.abstract then utils.nomarkup(dataModel.abstract) else ''
    descriptionNoMarkup = if dataModel.description then utils.nomarkup(dataModel.description) else ''

    ##ShareData
    shareData =
        model:
            url: dataModel.url
            title: headlineNoMarkup
            abstract: abstractNoMarkup
            description: descriptionNoMarkup
            id: dataModel.id
            shareId: dataModel.shareId
            media: mediaObj

    return  {
        current:
            id: dataModel.id
            headline: dataModel.headline || ''
            abstract: dataModel.abstract || ''
            description: (dataModel.abstract || '') + (dataModel.description || '')
            displayDateTime: utils.timeAgo(dataModel.displayDateTime)
            media: mediaObj
            url: buildAbsoluteUrl(dataModel.url)
            tags: filterAndMapTags(dataModel.tags) || []
            author: dataModel.author || {}
            nomarkup:
                headline: headlineNoMarkup
                abstract: abstractNoMarkup
                description: descriptionNoMarkup
            shareId: utils.uuid()
            shareData: shareData
            videoId: if dataModel.media.type is 'video' then utils.uuid()
            bodyCopy: dataModel.bodyCopy
        next: getRelatedDataModel(dataModel.next)
        previous: getRelatedDataModel(dataModel.previous)
        header: dataModel.header
        partials: dataModel.templates
        settings: dataModel.settings || {}
        outbrain: dataModel.outbrain || {}
        meta: dataModel.meta || {}
        tracking: dataModel.tracking || {}
    }

module.exports = getViewModel