q = require 'q'
_ = require 'lodash'
cheerio = require 'cheerio'
social = require 'mi9-social'
ads = require 'mi9-ads-common'
imageResizer = require 'mi9-image-resizer'
templates = require 'mi9-templates-common'
getViewModel = require './viewModel'

class Article

    constructor: ({imageResizer, config}) ->
        @imageResizer = imageResizer
        @config = config
        @getViewModel = getViewModel

    templates:
        outbrain: templates.outbrain
        author: templates.author
        videoBlock: templates.videoBlock
        ad: ads.templates.ad
        share: social.templates.share
        imageResizer: imageResizer.templates.imageResizer
        article: require '../templates/article'
        comments: require '../templates/comments'
        related: require '../templates/related'

    injectAds: (htmlString) ->
        $ = cheerio.load htmlString, decodeEntities: false
        bodyContent = []
        significantParagraphs = []

        $.root().contents().map (i, el) ->
            significantParagraphs.push i if $(this).text().trim() isnt ''
            bodyContent.push $.html(this)

        if significantParagraphs.length > 3
            # inject ad after fifth paragraph that contains text
            bodyContent.splice significantParagraphs[3], 0, @templates.ad({type: 'ad', adType: 'MEDIUM'})

        return bodyContent.join('')

    injectVideos: (htmlString) ->
        $ = cheerio.load htmlString, decodeEntities: false

        $('img[data-video-id]').each (index, element) =>
            view = @templates.videoBlock(
                model: {
                    urn: $(element).data('video-id')
                    url: $(element).attr('src')
                }
            )
            $(element).replaceWith(view) if view

        return $.html()

    viewModel: (dataModel) =>
        viewModelData = @getViewModel(dataModel, @imageResizer, @config)
        bodyCopyWithAdsAndVideos = @injectVideos @injectAds(viewModelData.current.bodyCopy)
        return _.merge {}, viewModelData, bodyCopyWithAdsAndVideos

module.exports = Article

